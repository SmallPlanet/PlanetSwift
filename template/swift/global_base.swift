<%
FULL_NAME_CAPS = "_"..string.upper(this.namespace).."_"
FULL_NAME_CAMEL = capitalizedString(this.namespace)
%>
//
// Autogenerated by gaxb at <%= os.date("%I:%M:%S %p on %x") %>
//

import Foundation
<% if (this.namespace ~= "PlanetUI") then %>import PlanetSwift
<% end %>
//private let xmlCache = NSCache<NSString, AnyObject>()

open class <%= FULL_NAME_CAMEL %> {

	open class func readFromFile(_ filePath: String, prepare: Bool = true) -> GaxbElement? {
		do {
			let xmlString = try String(contentsOfFile: filePath, encoding: .utf8)
			return <%= FULL_NAME_CAMEL %>.readFromString(xmlString, prepare: prepare)
		} catch {
			return nil
		}
	}

	open class func readFromString(_ string: String, prepare: Bool = true) -> GaxbElement? {

		/*
		if let cachedElement = xmlCache.object(forKey: string as NSString) as? GaxbElement {
			let copiedCache = cachedElement.copy()
			if prepare {
				copiedCache.visit() { $0.gaxbPrepare() }
			}
			return copiedCache
		}*/

		if let xmlData = <%= FULL_NAME_CAMEL %>.processExpressions(string).data(using: .utf8, allowLossyConversion: false) {
			do {
				let xmlDoc = try AEXMLDocument(xmlData: xmlData, processNamespaces: true)
				if let parsedElement = <%= FULL_NAME_CAMEL %>.parseElement(xmlDoc.root) {
                    //let copiedElement = parsedElement.copy()
                    //xmlCache.setObject(copiedElement, forKey: string as NSString)
					if prepare {
						parsedElement.visit() { $0.gaxbPrepare() }
					}
					return parsedElement
				}
			} catch {
				return nil
			}
		}
		return nil
	}


	open class func namespaceForElement(_ element: AEXMLElement) -> String {
		if let namespaceURI = element.namespaceURI {
			return NSString(string: namespaceURI).lastPathComponent
		}
		return "<%= FULL_NAME_CAMEL %>"
	}

	open class func parseElement(_ element: AEXMLElement) -> GaxbElement? {
		guard let entity = GaxbFactory.element(namespaceForElement(element), name:element.name) else { return nil }
		if let styleId = element.attributes["styleId" as NSObject] as? String,
			let styleElement = Object.styleForId(styleId) {
			_ = styleElement.imprintAttributes(entity)
		}
        // Note: the ordering of the attributes are not gauranteed, so check if externalClass exists first
        // and set it if it does, so the external class can have access to all of the attributes
        for (attribute, value) in element.attributes {
            if let valueString = value as? String, let attributeString = attribute as? String {
                if attributeString == "externalClass" {
                    entity.setAttribute(valueString, key: attributeString)
                    break
                }
            }
        }
        
		for (attribute, value) in element.attributes {
			if let valueString = value as? String, let attributeString = attribute as? String {
				if attributeString != "externalClass" {
					entity.setAttribute(valueString, key: attributeString)
				}
			}
		}
		
		for child in element.children {
			if let subEntity = <%= FULL_NAME_CAMEL %>.parseElement(child) {
				entity.setElement(subEntity, key: child.name)
			}
		}
		return entity
	}

<%
	-- simpleType definitions, such as enums
	for k,v in pairs(schema.simpleTypes) do
		-- only include defintions from this schema's namespace
		if (isEnumForItem(v)) then
			if (schema.namespace == v.namespace) then

				gaxb_print("\tpublic enum "..v.name..": String {\n");

				local appinfo = gaxb_xpath(v.xml, "./XMLSchema:annotation/XMLSchema:appinfo");
				local enums = gaxb_xpath(v.xml, "./XMLSchema:restriction/XMLSchema:enumeration");

				if(appinfo ~= nil) then
					appinfo = appinfo[1].content;
				end

				if(appinfo == "ENUM" or appinfo == "NAMED_ENUM") then
					for k,v in pairs(enums) do
						gaxb_print("\t\tcase "..v.attributes.value.."\n")
					end
				end
		--		if(appinfo == "ENUM_MASK") then
		--			local i = 1
		--			gaxb_print("\topen enum\n{\n")
		--			for k,v in pairs(enums) do
		--				gaxb_print("\t\t"..v.attributes.value.." = "..i..",\n")
		--				i = i * 2;
		--			end
		--			gaxb_print("\t};\n")
		--		end

				gaxb_print("\t}\n\n");
			end
		end
	end
%>}

@objc(<%= FULL_NAME_CAMEL %>GaxbFactory) public class <%= FULL_NAME_CAMEL %>GaxbFactory : GaxbFactory {
	public override func classWithName(_ name : String) -> GaxbElement? {
		switch name {<%
for k,v in pairs(schema.elements) do
	-- if not in the schema namespace, skip
	if (schema.namespace == v.namespace) then
		v.name = cleanedName(v.name);%>
		case "<%= v.name %>":
			return <%= v.name %>()<%
	end
end %>
		default:
			return nil
		}
	}
}

public extension GaxbElement {<%
for k,v in pairs(schema.elements) do
-- if not in the schema namespace, skip
if (schema.namespace == v.namespace) then
v.name = cleanedName(v.name);%>
    var as<%= v.name %>: <%= v.name %>? { return self as? <%= v.name %> }<%
	end
end %>
}
