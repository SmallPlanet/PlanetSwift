//
// Autogenerated by gaxb at 05:06:37 PM on 06/10/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class ObjectBase: GaxbElement {

    open var xmlns: String = "http://schema.smallplanet.com/PlanetUI"
    open weak var parent: GaxbElement?
    open var originalValues = [String: String]()

    public required init() { }
    open func gaxbPrepare() { }
    open func gaxbDidPrepare() { }

	open var anys: [GaxbElement] = []

	open func customCopyTo(_ other: Object) {
        // can be overriden by subclasses to provide custom copying
    }

    open func copy() -> GaxbElement {
        let copied = type(of: self).init()
        var anyCopy: GaxbElement
        for any in anys {
            anyCopy = any.copy()
            copied.anys.append(anyCopy)
            anyCopy.parent = copied
        }
        copied.id = id
        copied.styleId = styleId

        return copied
    }

	open func visit(_ visitor: (GaxbElement) -> Void) {
        visitor(self)

        for any in anys {
            any.visit(visitor)
        }
	}

    open func setElement(_ element: GaxbElement, key: String) {
        anys.append(element)
        element.setParent(self)
    }

    open func setParent(_ parent: GaxbElement) {
        self.parent = parent
    }

     open func isKindOfClass(_ className: String) -> Bool {
        if className == "Object" {
            return true
        }
        return false
    }

	open var id: String?

    func idAsString() -> String {
        return id ?? ""
    }

    open func setId(_ value: String) {
        self.id = String(gaxbString: value)
    }

	open var styleId: String?

    func styleIdAsString() -> String {
        return styleId ?? ""
    }

    open func setStyleId(_ value: String) {
        self.styleId = String(gaxbString: value)
    }

    open func setAttribute(_ value: String, key: String) {
        originalValues[key] = value
        switch key {
        case "id":
            setId(value)
        case "styleId":
            setStyleId(value)
        default:
            break
        }
    }

    open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["id"] != nil && obj.originalValues["id"] == nil {
				obj.setAttribute(originalValues["id"]!, key: "id")
            }
            if originalValues["styleId"] != nil && obj.originalValues["styleId"] == nil {
				obj.setAttribute(originalValues["styleId"]!, key: "styleId")
            }
       }
       return receiver
    }

    open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if id != nil {
                xml += " id='\(idAsString())'"
            }
                if styleId != nil {
                xml += " styleId='\(styleIdAsString())'"
            }
            }

        return xml
    }

    open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        for any in anys {
            xml += any.toXML()
        }
        return xml
    }

    open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<Object"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</Object>"
        return xml
    }

    open func toXML() -> String {
        return toXML(false)
    }

    open func description() -> String {
        return toXML()
    }

}
