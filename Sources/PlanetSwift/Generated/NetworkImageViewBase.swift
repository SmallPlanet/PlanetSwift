//
// Autogenerated by gaxb at 04:06:24 PM on 06/10/20
//

import UIKit

open class NetworkImageViewBase : ImageView {


	open func customCopyTo(_ other:NetworkImageView) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! NetworkImageView

        copied.placeholderPath = placeholderPath
        copied.placeholderContentMode = placeholderContentMode


		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> ()) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key:String) {
        super.setElement(element, key:key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "NetworkImageView" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var placeholderPath: String?

    func placeholderPathAsString() -> String {
        return placeholderPath ?? ""
    }

    open func setPlaceholderPath(_ value: String) {
        self.placeholderPath = String(gaxbString: value)
    }

	open var placeholderContentMode: PlanetUI.ContentMode?

    func placeholderContentModeAsString() -> String {
        return placeholderContentMode!.rawValue
    }

    open func setPlaceholderContentMode(_ value: String) {
        if let tmp = PlanetUI.ContentMode(rawValue: value) {
            placeholderContentMode = tmp
        }
    }

    override open func setAttribute(_ value: String, key:String) {
        super.setAttribute(value, key:key)
        switch key {
            case "placeholderPath":
                setPlaceholderPath(value)
            case "placeholderContentMode":
                setPlaceholderContentMode(value)
            default:
                break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {
       
	if let obj = receiver as? ObjectBase {
            if originalValues["placeholderPath"] != nil && obj.originalValues["placeholderPath"] == nil {
				obj.setAttribute(originalValues["placeholderPath"]!, key: "placeholderPath")
            }
            if originalValues["placeholderContentMode"] != nil && obj.originalValues["placeholderContentMode"] == nil {
				obj.setAttribute(originalValues["placeholderContentMode"]!, key: "placeholderContentMode")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if placeholderPath != nil {
                xml += " placeholderPath='\(placeholderPathAsString())'"
            }
                if placeholderContentMode != nil {
                xml += " placeholderContentMode='\(placeholderContentModeAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues:Bool) -> String {
        var xml = "<NetworkImageView"
        if (parent == nil || parent?.xmlns != xmlns) {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>" : ">\(sXML)</NetworkImageView>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
