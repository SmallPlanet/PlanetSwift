//
// Autogenerated by gaxb at 05:06:37 PM on 06/10/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class ButtonBase: Control {

	open func customCopyTo(_ other: Button) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! Button
        copied.type = type
        copied.onTouchUp = onTouchUp
        copied.onTouchDown = onTouchDown
        copied.tintColor = tintColor
        copied.title = title
        copied.titleHighlighted = titleHighlighted
        copied.titleSelected = titleSelected
        copied.titleSelectedHighlighted = titleSelectedHighlighted
        copied.titleDisabled = titleDisabled
        copied.titleFontColor = titleFontColor
        copied.titleFontColorHighlighted = titleFontColorHighlighted
        copied.titleFontColorSelected = titleFontColorSelected
        copied.titleFontColorSelectedHighlighted = titleFontColorSelectedHighlighted
        copied.titleFontColorDisabled = titleFontColorDisabled
        copied.titleFont = titleFont
        copied.titleFontSize = titleFontSize
        copied.isToggle = isToggle
        copied.backgroundColorHighlighted = backgroundColorHighlighted
        copied.backgroundColorSelected = backgroundColorSelected
        copied.backgroundColorSelectedHighlighted = backgroundColorSelectedHighlighted
        copied.backgroundColorDisabled = backgroundColorDisabled
        copied.backgroundImage = backgroundImage
        copied.backgroundImageHighlighted = backgroundImageHighlighted
        copied.backgroundImageSelected = backgroundImageSelected
        copied.backgroundImageSelectedHighlighted = backgroundImageSelectedHighlighted
        copied.backgroundImageDisabled = backgroundImageDisabled
        copied.image = image
        copied.imageHighlighted = imageHighlighted
        copied.imageSelected = imageSelected
        copied.imageSelectedHighlighted = imageSelectedHighlighted
        copied.imageDisabled = imageDisabled
        copied.backgroundImageSet = backgroundImageSet
        copied.imageSet = imageSet
        copied.contentEdgeInsets = contentEdgeInsets
        copied.titleEdgeInsets = titleEdgeInsets
        copied.imageEdgeInsets = imageEdgeInsets

		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> Void) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key: String) {
        super.setElement(element, key: key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "Button" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var type: PlanetUI.ButtonType?

    func typeAsString() -> String {
        return type!.rawValue
    }

    open func setType(_ value: String) {
        if let tmp = PlanetUI.ButtonType(rawValue: value) {
            type = tmp
        }
    }

	open var onTouchUp: String?

    func onTouchUpAsString() -> String {
        return onTouchUp ?? ""
    }

    open func setOnTouchUp(_ value: String) {
        self.onTouchUp = String(gaxbString: value)
    }

	open var onTouchDown: String?

    func onTouchDownAsString() -> String {
        return onTouchDown ?? ""
    }

    open func setOnTouchDown(_ value: String) {
        self.onTouchDown = String(gaxbString: value)
    }

	open var tintColor: UIColor?

    func tintColorAsString() -> String {
        return tintColor!.toGaxbString()
    }

    open func setTintColor(_ value: String) {
        tintColor =  UIColor(gaxbString: value)
    }

	open var title: String?

    func titleAsString() -> String {
        return title ?? ""
    }

    open func setTitle(_ value: String) {
        self.title = String(gaxbString: value)
    }

	open var titleHighlighted: String?

    func titleHighlightedAsString() -> String {
        return titleHighlighted ?? ""
    }

    open func setTitleHighlighted(_ value: String) {
        self.titleHighlighted = String(gaxbString: value)
    }

	open var titleSelected: String?

    func titleSelectedAsString() -> String {
        return titleSelected ?? ""
    }

    open func setTitleSelected(_ value: String) {
        self.titleSelected = String(gaxbString: value)
    }

	open var titleSelectedHighlighted: String?

    func titleSelectedHighlightedAsString() -> String {
        return titleSelectedHighlighted ?? ""
    }

    open func setTitleSelectedHighlighted(_ value: String) {
        self.titleSelectedHighlighted = String(gaxbString: value)
    }

	open var titleDisabled: String?

    func titleDisabledAsString() -> String {
        return titleDisabled ?? ""
    }

    open func setTitleDisabled(_ value: String) {
        self.titleDisabled = String(gaxbString: value)
    }

	open var titleFontColor: UIColor?

    func titleFontColorAsString() -> String {
        return titleFontColor!.toGaxbString()
    }

    open func setTitleFontColor(_ value: String) {
        titleFontColor =  UIColor(gaxbString: value)
    }

	open var titleFontColorHighlighted: UIColor?

    func titleFontColorHighlightedAsString() -> String {
        return titleFontColorHighlighted!.toGaxbString()
    }

    open func setTitleFontColorHighlighted(_ value: String) {
        titleFontColorHighlighted =  UIColor(gaxbString: value)
    }

	open var titleFontColorSelected: UIColor?

    func titleFontColorSelectedAsString() -> String {
        return titleFontColorSelected!.toGaxbString()
    }

    open func setTitleFontColorSelected(_ value: String) {
        titleFontColorSelected =  UIColor(gaxbString: value)
    }

	open var titleFontColorSelectedHighlighted: UIColor?

    func titleFontColorSelectedHighlightedAsString() -> String {
        return titleFontColorSelectedHighlighted!.toGaxbString()
    }

    open func setTitleFontColorSelectedHighlighted(_ value: String) {
        titleFontColorSelectedHighlighted =  UIColor(gaxbString: value)
    }

	open var titleFontColorDisabled: UIColor?

    func titleFontColorDisabledAsString() -> String {
        return titleFontColorDisabled!.toGaxbString()
    }

    open func setTitleFontColorDisabled(_ value: String) {
        titleFontColorDisabled =  UIColor(gaxbString: value)
    }

	open var titleFont: String?

    func titleFontAsString() -> String {
        return titleFont ?? ""
    }

    open func setTitleFont(_ value: String) {
        self.titleFont = String(gaxbString: value)
    }

	open var titleFontSize: Double?

    func titleFontSizeAsString() -> String {
        return titleFontSize!.toGaxbString()
    }

    open func setTitleFontSize(_ value: String) {
        self.titleFontSize = (value as NSString).doubleValue
    }

	open var isToggle: Bool = false

    func isToggleAsString() -> String {
        return isToggle.toGaxbString()
    }

    open func setIsToggle(_ value: String) {
        self.isToggle = value == "true"
    }

	open var backgroundColorHighlighted: UIColor?

    func backgroundColorHighlightedAsString() -> String {
        return backgroundColorHighlighted!.toGaxbString()
    }

    open func setBackgroundColorHighlighted(_ value: String) {
        backgroundColorHighlighted =  UIColor(gaxbString: value)
    }

	open var backgroundColorSelected: UIColor?

    func backgroundColorSelectedAsString() -> String {
        return backgroundColorSelected!.toGaxbString()
    }

    open func setBackgroundColorSelected(_ value: String) {
        backgroundColorSelected =  UIColor(gaxbString: value)
    }

	open var backgroundColorSelectedHighlighted: UIColor?

    func backgroundColorSelectedHighlightedAsString() -> String {
        return backgroundColorSelectedHighlighted!.toGaxbString()
    }

    open func setBackgroundColorSelectedHighlighted(_ value: String) {
        backgroundColorSelectedHighlighted =  UIColor(gaxbString: value)
    }

	open var backgroundColorDisabled: UIColor?

    func backgroundColorDisabledAsString() -> String {
        return backgroundColorDisabled!.toGaxbString()
    }

    open func setBackgroundColorDisabled(_ value: String) {
        backgroundColorDisabled =  UIColor(gaxbString: value)
    }

	open var backgroundImage: String?

    func backgroundImageAsString() -> String {
        return backgroundImage ?? ""
    }

    open func setBackgroundImage(_ value: String) {
        self.backgroundImage = String(gaxbString: value)
    }

	open var backgroundImageHighlighted: String?

    func backgroundImageHighlightedAsString() -> String {
        return backgroundImageHighlighted ?? ""
    }

    open func setBackgroundImageHighlighted(_ value: String) {
        self.backgroundImageHighlighted = String(gaxbString: value)
    }

	open var backgroundImageSelected: String?

    func backgroundImageSelectedAsString() -> String {
        return backgroundImageSelected ?? ""
    }

    open func setBackgroundImageSelected(_ value: String) {
        self.backgroundImageSelected = String(gaxbString: value)
    }

	open var backgroundImageSelectedHighlighted: String?

    func backgroundImageSelectedHighlightedAsString() -> String {
        return backgroundImageSelectedHighlighted ?? ""
    }

    open func setBackgroundImageSelectedHighlighted(_ value: String) {
        self.backgroundImageSelectedHighlighted = String(gaxbString: value)
    }

	open var backgroundImageDisabled: String?

    func backgroundImageDisabledAsString() -> String {
        return backgroundImageDisabled ?? ""
    }

    open func setBackgroundImageDisabled(_ value: String) {
        self.backgroundImageDisabled = String(gaxbString: value)
    }

	open var image: String?

    func imageAsString() -> String {
        return image ?? ""
    }

    open func setImage(_ value: String) {
        self.image = String(gaxbString: value)
    }

	open var imageHighlighted: String?

    func imageHighlightedAsString() -> String {
        return imageHighlighted ?? ""
    }

    open func setImageHighlighted(_ value: String) {
        self.imageHighlighted = String(gaxbString: value)
    }

	open var imageSelected: String?

    func imageSelectedAsString() -> String {
        return imageSelected ?? ""
    }

    open func setImageSelected(_ value: String) {
        self.imageSelected = String(gaxbString: value)
    }

	open var imageSelectedHighlighted: String?

    func imageSelectedHighlightedAsString() -> String {
        return imageSelectedHighlighted ?? ""
    }

    open func setImageSelectedHighlighted(_ value: String) {
        self.imageSelectedHighlighted = String(gaxbString: value)
    }

	open var imageDisabled: String?

    func imageDisabledAsString() -> String {
        return imageDisabled ?? ""
    }

    open func setImageDisabled(_ value: String) {
        self.imageDisabled = String(gaxbString: value)
    }

	open var backgroundImageSet: String?

    func backgroundImageSetAsString() -> String {
        return backgroundImageSet ?? ""
    }

    open func setBackgroundImageSet(_ value: String) {
        self.backgroundImageSet = String(gaxbString: value)
    }

	open var imageSet: String?

    func imageSetAsString() -> String {
        return imageSet ?? ""
    }

    open func setImageSet(_ value: String) {
        self.imageSet = String(gaxbString: value)
    }

	open var contentEdgeInsets: UIEdgeInsets?

    func contentEdgeInsetsAsString() -> String {
        return contentEdgeInsets!.toGaxbString()
    }

    open func setContentEdgeInsets(_ value: String) {
        contentEdgeInsets =  UIEdgeInsets(gaxbString: value)
    }

	open var titleEdgeInsets: UIEdgeInsets?

    func titleEdgeInsetsAsString() -> String {
        return titleEdgeInsets!.toGaxbString()
    }

    open func setTitleEdgeInsets(_ value: String) {
        titleEdgeInsets =  UIEdgeInsets(gaxbString: value)
    }

	open var imageEdgeInsets: UIEdgeInsets?

    func imageEdgeInsetsAsString() -> String {
        return imageEdgeInsets!.toGaxbString()
    }

    open func setImageEdgeInsets(_ value: String) {
        imageEdgeInsets =  UIEdgeInsets(gaxbString: value)
    }

    override open func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        switch key {
        case "type":
            setType(value)
        case "onTouchUp":
            setOnTouchUp(value)
        case "onTouchDown":
            setOnTouchDown(value)
        case "tintColor":
            setTintColor(value)
        case "title":
            setTitle(value)
        case "titleHighlighted":
            setTitleHighlighted(value)
        case "titleSelected":
            setTitleSelected(value)
        case "titleSelectedHighlighted":
            setTitleSelectedHighlighted(value)
        case "titleDisabled":
            setTitleDisabled(value)
        case "titleFontColor":
            setTitleFontColor(value)
        case "titleFontColorHighlighted":
            setTitleFontColorHighlighted(value)
        case "titleFontColorSelected":
            setTitleFontColorSelected(value)
        case "titleFontColorSelectedHighlighted":
            setTitleFontColorSelectedHighlighted(value)
        case "titleFontColorDisabled":
            setTitleFontColorDisabled(value)
        case "titleFont":
            setTitleFont(value)
        case "titleFontSize":
            setTitleFontSize(value)
        case "isToggle":
            setIsToggle(value)
        case "backgroundColorHighlighted":
            setBackgroundColorHighlighted(value)
        case "backgroundColorSelected":
            setBackgroundColorSelected(value)
        case "backgroundColorSelectedHighlighted":
            setBackgroundColorSelectedHighlighted(value)
        case "backgroundColorDisabled":
            setBackgroundColorDisabled(value)
        case "backgroundImage":
            setBackgroundImage(value)
        case "backgroundImageHighlighted":
            setBackgroundImageHighlighted(value)
        case "backgroundImageSelected":
            setBackgroundImageSelected(value)
        case "backgroundImageSelectedHighlighted":
            setBackgroundImageSelectedHighlighted(value)
        case "backgroundImageDisabled":
            setBackgroundImageDisabled(value)
        case "image":
            setImage(value)
        case "imageHighlighted":
            setImageHighlighted(value)
        case "imageSelected":
            setImageSelected(value)
        case "imageSelectedHighlighted":
            setImageSelectedHighlighted(value)
        case "imageDisabled":
            setImageDisabled(value)
        case "backgroundImageSet":
            setBackgroundImageSet(value)
        case "imageSet":
            setImageSet(value)
        case "contentEdgeInsets":
            setContentEdgeInsets(value)
        case "titleEdgeInsets":
            setTitleEdgeInsets(value)
        case "imageEdgeInsets":
            setImageEdgeInsets(value)
        default:
            break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["type"] != nil && obj.originalValues["type"] == nil {
				obj.setAttribute(originalValues["type"]!, key: "type")
            }
            if originalValues["onTouchUp"] != nil && obj.originalValues["onTouchUp"] == nil {
				obj.setAttribute(originalValues["onTouchUp"]!, key: "onTouchUp")
            }
            if originalValues["onTouchDown"] != nil && obj.originalValues["onTouchDown"] == nil {
				obj.setAttribute(originalValues["onTouchDown"]!, key: "onTouchDown")
            }
            if originalValues["tintColor"] != nil && obj.originalValues["tintColor"] == nil {
				obj.setAttribute(originalValues["tintColor"]!, key: "tintColor")
            }
            if originalValues["title"] != nil && obj.originalValues["title"] == nil {
				obj.setAttribute(originalValues["title"]!, key: "title")
            }
            if originalValues["titleHighlighted"] != nil && obj.originalValues["titleHighlighted"] == nil {
				obj.setAttribute(originalValues["titleHighlighted"]!, key: "titleHighlighted")
            }
            if originalValues["titleSelected"] != nil && obj.originalValues["titleSelected"] == nil {
				obj.setAttribute(originalValues["titleSelected"]!, key: "titleSelected")
            }
            if originalValues["titleSelectedHighlighted"] != nil && obj.originalValues["titleSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["titleSelectedHighlighted"]!, key: "titleSelectedHighlighted")
            }
            if originalValues["titleDisabled"] != nil && obj.originalValues["titleDisabled"] == nil {
				obj.setAttribute(originalValues["titleDisabled"]!, key: "titleDisabled")
            }
            if originalValues["titleFontColor"] != nil && obj.originalValues["titleFontColor"] == nil {
				obj.setAttribute(originalValues["titleFontColor"]!, key: "titleFontColor")
            }
            if originalValues["titleFontColorHighlighted"] != nil && obj.originalValues["titleFontColorHighlighted"] == nil {
				obj.setAttribute(originalValues["titleFontColorHighlighted"]!, key: "titleFontColorHighlighted")
            }
            if originalValues["titleFontColorSelected"] != nil && obj.originalValues["titleFontColorSelected"] == nil {
				obj.setAttribute(originalValues["titleFontColorSelected"]!, key: "titleFontColorSelected")
            }
            if originalValues["titleFontColorSelectedHighlighted"] != nil && obj.originalValues["titleFontColorSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["titleFontColorSelectedHighlighted"]!, key: "titleFontColorSelectedHighlighted")
            }
            if originalValues["titleFontColorDisabled"] != nil && obj.originalValues["titleFontColorDisabled"] == nil {
				obj.setAttribute(originalValues["titleFontColorDisabled"]!, key: "titleFontColorDisabled")
            }
            if originalValues["titleFont"] != nil && obj.originalValues["titleFont"] == nil {
				obj.setAttribute(originalValues["titleFont"]!, key: "titleFont")
            }
            if originalValues["titleFontSize"] != nil && obj.originalValues["titleFontSize"] == nil {
				obj.setAttribute(originalValues["titleFontSize"]!, key: "titleFontSize")
            }
            if originalValues["isToggle"] != nil && obj.originalValues["isToggle"] == nil {
				obj.setAttribute(originalValues["isToggle"]!, key: "isToggle")
            }
            if originalValues["backgroundColorHighlighted"] != nil && obj.originalValues["backgroundColorHighlighted"] == nil {
				obj.setAttribute(originalValues["backgroundColorHighlighted"]!, key: "backgroundColorHighlighted")
            }
            if originalValues["backgroundColorSelected"] != nil && obj.originalValues["backgroundColorSelected"] == nil {
				obj.setAttribute(originalValues["backgroundColorSelected"]!, key: "backgroundColorSelected")
            }
            if originalValues["backgroundColorSelectedHighlighted"] != nil && obj.originalValues["backgroundColorSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["backgroundColorSelectedHighlighted"]!, key: "backgroundColorSelectedHighlighted")
            }
            if originalValues["backgroundColorDisabled"] != nil && obj.originalValues["backgroundColorDisabled"] == nil {
				obj.setAttribute(originalValues["backgroundColorDisabled"]!, key: "backgroundColorDisabled")
            }
            if originalValues["backgroundImage"] != nil && obj.originalValues["backgroundImage"] == nil {
				obj.setAttribute(originalValues["backgroundImage"]!, key: "backgroundImage")
            }
            if originalValues["backgroundImageHighlighted"] != nil && obj.originalValues["backgroundImageHighlighted"] == nil {
				obj.setAttribute(originalValues["backgroundImageHighlighted"]!, key: "backgroundImageHighlighted")
            }
            if originalValues["backgroundImageSelected"] != nil && obj.originalValues["backgroundImageSelected"] == nil {
				obj.setAttribute(originalValues["backgroundImageSelected"]!, key: "backgroundImageSelected")
            }
            if originalValues["backgroundImageSelectedHighlighted"] != nil && obj.originalValues["backgroundImageSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["backgroundImageSelectedHighlighted"]!, key: "backgroundImageSelectedHighlighted")
            }
            if originalValues["backgroundImageDisabled"] != nil && obj.originalValues["backgroundImageDisabled"] == nil {
				obj.setAttribute(originalValues["backgroundImageDisabled"]!, key: "backgroundImageDisabled")
            }
            if originalValues["image"] != nil && obj.originalValues["image"] == nil {
				obj.setAttribute(originalValues["image"]!, key: "image")
            }
            if originalValues["imageHighlighted"] != nil && obj.originalValues["imageHighlighted"] == nil {
				obj.setAttribute(originalValues["imageHighlighted"]!, key: "imageHighlighted")
            }
            if originalValues["imageSelected"] != nil && obj.originalValues["imageSelected"] == nil {
				obj.setAttribute(originalValues["imageSelected"]!, key: "imageSelected")
            }
            if originalValues["imageSelectedHighlighted"] != nil && obj.originalValues["imageSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["imageSelectedHighlighted"]!, key: "imageSelectedHighlighted")
            }
            if originalValues["imageDisabled"] != nil && obj.originalValues["imageDisabled"] == nil {
				obj.setAttribute(originalValues["imageDisabled"]!, key: "imageDisabled")
            }
            if originalValues["backgroundImageSet"] != nil && obj.originalValues["backgroundImageSet"] == nil {
				obj.setAttribute(originalValues["backgroundImageSet"]!, key: "backgroundImageSet")
            }
            if originalValues["imageSet"] != nil && obj.originalValues["imageSet"] == nil {
				obj.setAttribute(originalValues["imageSet"]!, key: "imageSet")
            }
            if originalValues["contentEdgeInsets"] != nil && obj.originalValues["contentEdgeInsets"] == nil {
				obj.setAttribute(originalValues["contentEdgeInsets"]!, key: "contentEdgeInsets")
            }
            if originalValues["titleEdgeInsets"] != nil && obj.originalValues["titleEdgeInsets"] == nil {
				obj.setAttribute(originalValues["titleEdgeInsets"]!, key: "titleEdgeInsets")
            }
            if originalValues["imageEdgeInsets"] != nil && obj.originalValues["imageEdgeInsets"] == nil {
				obj.setAttribute(originalValues["imageEdgeInsets"]!, key: "imageEdgeInsets")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if type != nil {
                xml += " type='\(typeAsString())'"
            }
                if onTouchUp != nil {
                xml += " onTouchUp='\(onTouchUpAsString())'"
            }
                if onTouchDown != nil {
                xml += " onTouchDown='\(onTouchDownAsString())'"
            }
                if tintColor != nil {
                xml += " tintColor='\(tintColorAsString())'"
            }
                if title != nil {
                xml += " title='\(titleAsString())'"
            }
                if titleHighlighted != nil {
                xml += " titleHighlighted='\(titleHighlightedAsString())'"
            }
                if titleSelected != nil {
                xml += " titleSelected='\(titleSelectedAsString())'"
            }
                if titleSelectedHighlighted != nil {
                xml += " titleSelectedHighlighted='\(titleSelectedHighlightedAsString())'"
            }
                if titleDisabled != nil {
                xml += " titleDisabled='\(titleDisabledAsString())'"
            }
                if titleFontColor != nil {
                xml += " titleFontColor='\(titleFontColorAsString())'"
            }
                if titleFontColorHighlighted != nil {
                xml += " titleFontColorHighlighted='\(titleFontColorHighlightedAsString())'"
            }
                if titleFontColorSelected != nil {
                xml += " titleFontColorSelected='\(titleFontColorSelectedAsString())'"
            }
                if titleFontColorSelectedHighlighted != nil {
                xml += " titleFontColorSelectedHighlighted='\(titleFontColorSelectedHighlightedAsString())'"
            }
                if titleFontColorDisabled != nil {
                xml += " titleFontColorDisabled='\(titleFontColorDisabledAsString())'"
            }
                if titleFont != nil {
                xml += " titleFont='\(titleFontAsString())'"
            }
                if titleFontSize != nil {
                xml += " titleFontSize='\(titleFontSizeAsString())'"
            }
                xml += " isToggle='\(isToggleAsString())'"
            if backgroundColorHighlighted != nil {
                xml += " backgroundColorHighlighted='\(backgroundColorHighlightedAsString())'"
            }
                if backgroundColorSelected != nil {
                xml += " backgroundColorSelected='\(backgroundColorSelectedAsString())'"
            }
                if backgroundColorSelectedHighlighted != nil {
                xml += " backgroundColorSelectedHighlighted='\(backgroundColorSelectedHighlightedAsString())'"
            }
                if backgroundColorDisabled != nil {
                xml += " backgroundColorDisabled='\(backgroundColorDisabledAsString())'"
            }
                if backgroundImage != nil {
                xml += " backgroundImage='\(backgroundImageAsString())'"
            }
                if backgroundImageHighlighted != nil {
                xml += " backgroundImageHighlighted='\(backgroundImageHighlightedAsString())'"
            }
                if backgroundImageSelected != nil {
                xml += " backgroundImageSelected='\(backgroundImageSelectedAsString())'"
            }
                if backgroundImageSelectedHighlighted != nil {
                xml += " backgroundImageSelectedHighlighted='\(backgroundImageSelectedHighlightedAsString())'"
            }
                if backgroundImageDisabled != nil {
                xml += " backgroundImageDisabled='\(backgroundImageDisabledAsString())'"
            }
                if image != nil {
                xml += " image='\(imageAsString())'"
            }
                if imageHighlighted != nil {
                xml += " imageHighlighted='\(imageHighlightedAsString())'"
            }
                if imageSelected != nil {
                xml += " imageSelected='\(imageSelectedAsString())'"
            }
                if imageSelectedHighlighted != nil {
                xml += " imageSelectedHighlighted='\(imageSelectedHighlightedAsString())'"
            }
                if imageDisabled != nil {
                xml += " imageDisabled='\(imageDisabledAsString())'"
            }
                if backgroundImageSet != nil {
                xml += " backgroundImageSet='\(backgroundImageSetAsString())'"
            }
                if imageSet != nil {
                xml += " imageSet='\(imageSetAsString())'"
            }
                if contentEdgeInsets != nil {
                xml += " contentEdgeInsets='\(contentEdgeInsetsAsString())'"
            }
                if titleEdgeInsets != nil {
                xml += " titleEdgeInsets='\(titleEdgeInsetsAsString())'"
            }
                if imageEdgeInsets != nil {
                xml += " imageEdgeInsets='\(imageEdgeInsetsAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<Button"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</Button>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
