//
// Autogenerated by gaxb at 04:06:25 PM on 06/10/20
//

import UIKit

open class TextViewBase : View {


	open func customCopyTo(_ other:TextView) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! TextView

        copied.text = text
        copied.fontName = fontName
        copied.fontSize = fontSize
        copied.textColor = textColor
        copied.textAlignment = textAlignment
        copied.tintColor = tintColor
        copied.selectable = selectable
        copied.editable = editable
        copied.onChange = onChange
        copied.onEndEditing = onEndEditing
        copied.leftButtonText = leftButtonText
        copied.rightButtonText = rightButtonText
        copied.onLeftButton = onLeftButton
        copied.onRightButton = onRightButton
        copied.maxCount = maxCount
        copied.showMaxCount = showMaxCount
        copied.requireMaxCount = requireMaxCount
        copied.keyboardType = keyboardType
        copied.forceKeyboard = forceKeyboard
        copied.rightButtonColor = rightButtonColor
        copied.leftButtonColor = leftButtonColor


		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> ()) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key:String) {
        super.setElement(element, key:key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "TextView" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var text: String?

    func textAsString() -> String {
        return text ?? ""
    }

    open func setText(_ value: String) {
        self.text = String(gaxbString: value)
    }

	open var fontName: String?

    func fontNameAsString() -> String {
        return fontName ?? ""
    }

    open func setFontName(_ value: String) {
        self.fontName = String(gaxbString: value)
    }

	open var fontSize: Double?

    func fontSizeAsString() -> String {
        return fontSize!.toGaxbString()
    }

    open func setFontSize(_ value: String) {
        self.fontSize = (value as NSString).doubleValue
    }

	open var textColor: UIColor?

    func textColorAsString() -> String {
        return textColor!.toGaxbString()
    }

    open func setTextColor(_ value: String) {
        textColor =  UIColor(gaxbString: value)
    }

	open var textAlignment: PlanetUI.TextAlignment?

    func textAlignmentAsString() -> String {
        return textAlignment!.rawValue
    }

    open func setTextAlignment(_ value: String) {
        if let tmp = PlanetUI.TextAlignment(rawValue: value) {
            textAlignment = tmp
        }
    }

	open var tintColor: UIColor?

    func tintColorAsString() -> String {
        return tintColor!.toGaxbString()
    }

    open func setTintColor(_ value: String) {
        tintColor =  UIColor(gaxbString: value)
    }

	open var selectable: Bool?

    func selectableAsString() -> String {
        return selectable!.toGaxbString()
    }

    open func setSelectable(_ value: String) {
        self.selectable = value == "true"
    }

	open var editable: Bool?

    func editableAsString() -> String {
        return editable!.toGaxbString()
    }

    open func setEditable(_ value: String) {
        self.editable = value == "true"
    }

	open var onChange: String?

    func onChangeAsString() -> String {
        return onChange ?? ""
    }

    open func setOnChange(_ value: String) {
        self.onChange = String(gaxbString: value)
    }

	open var onEndEditing: String?

    func onEndEditingAsString() -> String {
        return onEndEditing ?? ""
    }

    open func setOnEndEditing(_ value: String) {
        self.onEndEditing = String(gaxbString: value)
    }

	open var leftButtonText: String?

    func leftButtonTextAsString() -> String {
        return leftButtonText ?? ""
    }

    open func setLeftButtonText(_ value: String) {
        self.leftButtonText = String(gaxbString: value)
    }

	open var rightButtonText: String?

    func rightButtonTextAsString() -> String {
        return rightButtonText ?? ""
    }

    open func setRightButtonText(_ value: String) {
        self.rightButtonText = String(gaxbString: value)
    }

	open var onLeftButton: String?

    func onLeftButtonAsString() -> String {
        return onLeftButton ?? ""
    }

    open func setOnLeftButton(_ value: String) {
        self.onLeftButton = String(gaxbString: value)
    }

	open var onRightButton: String?

    func onRightButtonAsString() -> String {
        return onRightButton ?? ""
    }

    open func setOnRightButton(_ value: String) {
        self.onRightButton = String(gaxbString: value)
    }

	open var maxCount: Double?

    func maxCountAsString() -> String {
        return maxCount!.toGaxbString()
    }

    open func setMaxCount(_ value: String) {
        self.maxCount = (value as NSString).doubleValue
    }

	open var showMaxCount: Bool?

    func showMaxCountAsString() -> String {
        return showMaxCount!.toGaxbString()
    }

    open func setShowMaxCount(_ value: String) {
        self.showMaxCount = value == "true"
    }

	open var requireMaxCount: Bool?

    func requireMaxCountAsString() -> String {
        return requireMaxCount!.toGaxbString()
    }

    open func setRequireMaxCount(_ value: String) {
        self.requireMaxCount = value == "true"
    }

	open var keyboardType: String?

    func keyboardTypeAsString() -> String {
        return keyboardType ?? ""
    }

    open func setKeyboardType(_ value: String) {
        self.keyboardType = String(gaxbString: value)
    }

	open var forceKeyboard: Bool?

    func forceKeyboardAsString() -> String {
        return forceKeyboard!.toGaxbString()
    }

    open func setForceKeyboard(_ value: String) {
        self.forceKeyboard = value == "true"
    }

	open var rightButtonColor: UIColor?

    func rightButtonColorAsString() -> String {
        return rightButtonColor!.toGaxbString()
    }

    open func setRightButtonColor(_ value: String) {
        rightButtonColor =  UIColor(gaxbString: value)
    }

	open var leftButtonColor: UIColor?

    func leftButtonColorAsString() -> String {
        return leftButtonColor!.toGaxbString()
    }

    open func setLeftButtonColor(_ value: String) {
        leftButtonColor =  UIColor(gaxbString: value)
    }

    override open func setAttribute(_ value: String, key:String) {
        super.setAttribute(value, key:key)
        switch key {
            case "text":
                setText(value)
            case "fontName":
                setFontName(value)
            case "fontSize":
                setFontSize(value)
            case "textColor":
                setTextColor(value)
            case "textAlignment":
                setTextAlignment(value)
            case "tintColor":
                setTintColor(value)
            case "selectable":
                setSelectable(value)
            case "editable":
                setEditable(value)
            case "onChange":
                setOnChange(value)
            case "onEndEditing":
                setOnEndEditing(value)
            case "leftButtonText":
                setLeftButtonText(value)
            case "rightButtonText":
                setRightButtonText(value)
            case "onLeftButton":
                setOnLeftButton(value)
            case "onRightButton":
                setOnRightButton(value)
            case "maxCount":
                setMaxCount(value)
            case "showMaxCount":
                setShowMaxCount(value)
            case "requireMaxCount":
                setRequireMaxCount(value)
            case "keyboardType":
                setKeyboardType(value)
            case "forceKeyboard":
                setForceKeyboard(value)
            case "rightButtonColor":
                setRightButtonColor(value)
            case "leftButtonColor":
                setLeftButtonColor(value)
            default:
                break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {
       
	if let obj = receiver as? ObjectBase {
            if originalValues["text"] != nil && obj.originalValues["text"] == nil {
				obj.setAttribute(originalValues["text"]!, key: "text")
            }
            if originalValues["fontName"] != nil && obj.originalValues["fontName"] == nil {
				obj.setAttribute(originalValues["fontName"]!, key: "fontName")
            }
            if originalValues["fontSize"] != nil && obj.originalValues["fontSize"] == nil {
				obj.setAttribute(originalValues["fontSize"]!, key: "fontSize")
            }
            if originalValues["textColor"] != nil && obj.originalValues["textColor"] == nil {
				obj.setAttribute(originalValues["textColor"]!, key: "textColor")
            }
            if originalValues["textAlignment"] != nil && obj.originalValues["textAlignment"] == nil {
				obj.setAttribute(originalValues["textAlignment"]!, key: "textAlignment")
            }
            if originalValues["tintColor"] != nil && obj.originalValues["tintColor"] == nil {
				obj.setAttribute(originalValues["tintColor"]!, key: "tintColor")
            }
            if originalValues["selectable"] != nil && obj.originalValues["selectable"] == nil {
				obj.setAttribute(originalValues["selectable"]!, key: "selectable")
            }
            if originalValues["editable"] != nil && obj.originalValues["editable"] == nil {
				obj.setAttribute(originalValues["editable"]!, key: "editable")
            }
            if originalValues["onChange"] != nil && obj.originalValues["onChange"] == nil {
				obj.setAttribute(originalValues["onChange"]!, key: "onChange")
            }
            if originalValues["onEndEditing"] != nil && obj.originalValues["onEndEditing"] == nil {
				obj.setAttribute(originalValues["onEndEditing"]!, key: "onEndEditing")
            }
            if originalValues["leftButtonText"] != nil && obj.originalValues["leftButtonText"] == nil {
				obj.setAttribute(originalValues["leftButtonText"]!, key: "leftButtonText")
            }
            if originalValues["rightButtonText"] != nil && obj.originalValues["rightButtonText"] == nil {
				obj.setAttribute(originalValues["rightButtonText"]!, key: "rightButtonText")
            }
            if originalValues["onLeftButton"] != nil && obj.originalValues["onLeftButton"] == nil {
				obj.setAttribute(originalValues["onLeftButton"]!, key: "onLeftButton")
            }
            if originalValues["onRightButton"] != nil && obj.originalValues["onRightButton"] == nil {
				obj.setAttribute(originalValues["onRightButton"]!, key: "onRightButton")
            }
            if originalValues["maxCount"] != nil && obj.originalValues["maxCount"] == nil {
				obj.setAttribute(originalValues["maxCount"]!, key: "maxCount")
            }
            if originalValues["showMaxCount"] != nil && obj.originalValues["showMaxCount"] == nil {
				obj.setAttribute(originalValues["showMaxCount"]!, key: "showMaxCount")
            }
            if originalValues["requireMaxCount"] != nil && obj.originalValues["requireMaxCount"] == nil {
				obj.setAttribute(originalValues["requireMaxCount"]!, key: "requireMaxCount")
            }
            if originalValues["keyboardType"] != nil && obj.originalValues["keyboardType"] == nil {
				obj.setAttribute(originalValues["keyboardType"]!, key: "keyboardType")
            }
            if originalValues["forceKeyboard"] != nil && obj.originalValues["forceKeyboard"] == nil {
				obj.setAttribute(originalValues["forceKeyboard"]!, key: "forceKeyboard")
            }
            if originalValues["rightButtonColor"] != nil && obj.originalValues["rightButtonColor"] == nil {
				obj.setAttribute(originalValues["rightButtonColor"]!, key: "rightButtonColor")
            }
            if originalValues["leftButtonColor"] != nil && obj.originalValues["leftButtonColor"] == nil {
				obj.setAttribute(originalValues["leftButtonColor"]!, key: "leftButtonColor")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if text != nil {
                xml += " text='\(textAsString())'"
            }
                if fontName != nil {
                xml += " fontName='\(fontNameAsString())'"
            }
                if fontSize != nil {
                xml += " fontSize='\(fontSizeAsString())'"
            }
                if textColor != nil {
                xml += " textColor='\(textColorAsString())'"
            }
                if textAlignment != nil {
                xml += " textAlignment='\(textAlignmentAsString())'"
            }
                if tintColor != nil {
                xml += " tintColor='\(tintColorAsString())'"
            }
                if selectable != nil {
                xml += " selectable='\(selectableAsString())'"
            }
                if editable != nil {
                xml += " editable='\(editableAsString())'"
            }
                if onChange != nil {
                xml += " onChange='\(onChangeAsString())'"
            }
                if onEndEditing != nil {
                xml += " onEndEditing='\(onEndEditingAsString())'"
            }
                if leftButtonText != nil {
                xml += " leftButtonText='\(leftButtonTextAsString())'"
            }
                if rightButtonText != nil {
                xml += " rightButtonText='\(rightButtonTextAsString())'"
            }
                if onLeftButton != nil {
                xml += " onLeftButton='\(onLeftButtonAsString())'"
            }
                if onRightButton != nil {
                xml += " onRightButton='\(onRightButtonAsString())'"
            }
                if maxCount != nil {
                xml += " maxCount='\(maxCountAsString())'"
            }
                if showMaxCount != nil {
                xml += " showMaxCount='\(showMaxCountAsString())'"
            }
                if requireMaxCount != nil {
                xml += " requireMaxCount='\(requireMaxCountAsString())'"
            }
                if keyboardType != nil {
                xml += " keyboardType='\(keyboardTypeAsString())'"
            }
                if forceKeyboard != nil {
                xml += " forceKeyboard='\(forceKeyboardAsString())'"
            }
                if rightButtonColor != nil {
                xml += " rightButtonColor='\(rightButtonColorAsString())'"
            }
                if leftButtonColor != nil {
                xml += " leftButtonColor='\(leftButtonColorAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues:Bool) -> String {
        var xml = "<TextView"
        if (parent == nil || parent?.xmlns != xmlns) {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>" : ">\(sXML)</TextView>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
