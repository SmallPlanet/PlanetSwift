//
// Autogenerated by gaxb at 05:06:37 PM on 06/10/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class ActivityIndicatorViewBase: View {

	open func customCopyTo(_ other: ActivityIndicatorView) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! ActivityIndicatorView
        copied.startAnimating = startAnimating
        copied.stopAnimating = stopAnimating
        copied.hidesWhenStopped = hidesWhenStopped
        copied.activityIndicatorViewStyle = activityIndicatorViewStyle
        copied.color = color

		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> Void) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key: String) {
        super.setElement(element, key: key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "ActivityIndicatorView" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var startAnimating: String?

    func startAnimatingAsString() -> String {
        return startAnimating ?? ""
    }

    open func setStartAnimating(_ value: String) {
        self.startAnimating = String(gaxbString: value)
    }

	open var stopAnimating: String?

    func stopAnimatingAsString() -> String {
        return stopAnimating ?? ""
    }

    open func setStopAnimating(_ value: String) {
        self.stopAnimating = String(gaxbString: value)
    }

	open var hidesWhenStopped: Bool?

    func hidesWhenStoppedAsString() -> String {
        return hidesWhenStopped!.toGaxbString()
    }

    open func setHidesWhenStopped(_ value: String) {
        self.hidesWhenStopped = value == "true"
    }

	open var activityIndicatorViewStyle: PlanetUI.ActivityIndicatorViewStyle?

    func activityIndicatorViewStyleAsString() -> String {
        return activityIndicatorViewStyle!.rawValue
    }

    open func setActivityIndicatorViewStyle(_ value: String) {
        if let tmp = PlanetUI.ActivityIndicatorViewStyle(rawValue: value) {
            activityIndicatorViewStyle = tmp
        }
    }

	open var color: UIColor?

    func colorAsString() -> String {
        return color!.toGaxbString()
    }

    open func setColor(_ value: String) {
        color =  UIColor(gaxbString: value)
    }

    override open func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        switch key {
        case "startAnimating":
            setStartAnimating(value)
        case "stopAnimating":
            setStopAnimating(value)
        case "hidesWhenStopped":
            setHidesWhenStopped(value)
        case "activityIndicatorViewStyle":
            setActivityIndicatorViewStyle(value)
        case "color":
            setColor(value)
        default:
            break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["startAnimating"] != nil && obj.originalValues["startAnimating"] == nil {
				obj.setAttribute(originalValues["startAnimating"]!, key: "startAnimating")
            }
            if originalValues["stopAnimating"] != nil && obj.originalValues["stopAnimating"] == nil {
				obj.setAttribute(originalValues["stopAnimating"]!, key: "stopAnimating")
            }
            if originalValues["hidesWhenStopped"] != nil && obj.originalValues["hidesWhenStopped"] == nil {
				obj.setAttribute(originalValues["hidesWhenStopped"]!, key: "hidesWhenStopped")
            }
            if originalValues["activityIndicatorViewStyle"] != nil && obj.originalValues["activityIndicatorViewStyle"] == nil {
				obj.setAttribute(originalValues["activityIndicatorViewStyle"]!, key: "activityIndicatorViewStyle")
            }
            if originalValues["color"] != nil && obj.originalValues["color"] == nil {
				obj.setAttribute(originalValues["color"]!, key: "color")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if startAnimating != nil {
                xml += " startAnimating='\(startAnimatingAsString())'"
            }
                if stopAnimating != nil {
                xml += " stopAnimating='\(stopAnimatingAsString())'"
            }
                if hidesWhenStopped != nil {
                xml += " hidesWhenStopped='\(hidesWhenStoppedAsString())'"
            }
                if activityIndicatorViewStyle != nil {
                xml += " activityIndicatorViewStyle='\(activityIndicatorViewStyleAsString())'"
            }
                if color != nil {
                xml += " color='\(colorAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<ActivityIndicatorView"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</ActivityIndicatorView>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
