//
// Autogenerated by gaxb at 04:06:25 PM on 06/10/20
//

import UIKit

open class SwitchBase : Control {


	open func customCopyTo(_ other:Switch) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! Switch

        copied.on = on
        copied.tintColor = tintColor
        copied.thumbTintColor = thumbTintColor
        copied.onTintColor = onTintColor


		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> ()) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key:String) {
        super.setElement(element, key:key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "Switch" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var on: Bool?

    func onAsString() -> String {
        return on!.toGaxbString()
    }

    open func setOn(_ value: String) {
        self.on = value == "true"
    }

	open var tintColor: UIColor?

    func tintColorAsString() -> String {
        return tintColor!.toGaxbString()
    }

    open func setTintColor(_ value: String) {
        tintColor =  UIColor(gaxbString: value)
    }

	open var thumbTintColor: UIColor?

    func thumbTintColorAsString() -> String {
        return thumbTintColor!.toGaxbString()
    }

    open func setThumbTintColor(_ value: String) {
        thumbTintColor =  UIColor(gaxbString: value)
    }

	open var onTintColor: UIColor?

    func onTintColorAsString() -> String {
        return onTintColor!.toGaxbString()
    }

    open func setOnTintColor(_ value: String) {
        onTintColor =  UIColor(gaxbString: value)
    }

    override open func setAttribute(_ value: String, key:String) {
        super.setAttribute(value, key:key)
        switch key {
            case "on":
                setOn(value)
            case "tintColor":
                setTintColor(value)
            case "thumbTintColor":
                setThumbTintColor(value)
            case "onTintColor":
                setOnTintColor(value)
            default:
                break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {
       
	if let obj = receiver as? ObjectBase {
            if originalValues["on"] != nil && obj.originalValues["on"] == nil {
				obj.setAttribute(originalValues["on"]!, key: "on")
            }
            if originalValues["tintColor"] != nil && obj.originalValues["tintColor"] == nil {
				obj.setAttribute(originalValues["tintColor"]!, key: "tintColor")
            }
            if originalValues["thumbTintColor"] != nil && obj.originalValues["thumbTintColor"] == nil {
				obj.setAttribute(originalValues["thumbTintColor"]!, key: "thumbTintColor")
            }
            if originalValues["onTintColor"] != nil && obj.originalValues["onTintColor"] == nil {
				obj.setAttribute(originalValues["onTintColor"]!, key: "onTintColor")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if on != nil {
                xml += " on='\(onAsString())'"
            }
                if tintColor != nil {
                xml += " tintColor='\(tintColorAsString())'"
            }
                if thumbTintColor != nil {
                xml += " thumbTintColor='\(thumbTintColorAsString())'"
            }
                if onTintColor != nil {
                xml += " onTintColor='\(onTintColorAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues:Bool) -> String {
        var xml = "<Switch"
        if (parent == nil || parent?.xmlns != xmlns) {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>" : ">\(sXML)</Switch>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
