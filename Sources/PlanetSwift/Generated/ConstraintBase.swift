//
// Autogenerated by gaxb at 04:06:24 PM on 06/10/20
//

import UIKit

open class ConstraintBase : Object {


	open func customCopyTo(_ other:Constraint) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! Constraint

        copied.priority = priority
        copied.firstItem = firstItem
        copied.secondItem = secondItem
        copied.firstAttribute = firstAttribute
        copied.secondAttribute = secondAttribute
        copied.relation = relation
        copied.multiplier = multiplier
        copied.constant = constant
        copied.ruleSet = ruleSet
        copied.ruleSetInfo = ruleSetInfo


		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> ()) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key:String) {
        super.setElement(element, key:key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "Constraint" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var priority: Float = 1000

    func priorityAsString() -> String {
        return priority.toGaxbString()
    }

    open func setPriority(_ value: String) {
        self.priority = (value as NSString).floatValue
    }

	open var firstItem: String?

    func firstItemAsString() -> String {
        return firstItem ?? ""
    }

    open func setFirstItem(_ value: String) {
        self.firstItem = String(gaxbString: value)
    }

	open var secondItem: String?

    func secondItemAsString() -> String {
        return secondItem ?? ""
    }

    open func setSecondItem(_ value: String) {
        self.secondItem = String(gaxbString: value)
    }

	open var firstAttribute: PlanetUI.LayoutAttribute = .notAnAttribute

    func firstAttributeAsString() -> String {
        return firstAttribute.rawValue
    }

    open func setFirstAttribute(_ value: String) {
        if let tmp = PlanetUI.LayoutAttribute(rawValue: value) {
            firstAttribute = tmp
        }
    }

	open var secondAttribute: PlanetUI.LayoutAttribute = .notAnAttribute

    func secondAttributeAsString() -> String {
        return secondAttribute.rawValue
    }

    open func setSecondAttribute(_ value: String) {
        if let tmp = PlanetUI.LayoutAttribute(rawValue: value) {
            secondAttribute = tmp
        }
    }

	open var relation: PlanetUI.LayoutRelation = .equal

    func relationAsString() -> String {
        return relation.rawValue
    }

    open func setRelation(_ value: String) {
        if let tmp = PlanetUI.LayoutRelation(rawValue: value) {
            relation = tmp
        }
    }

	open var multiplier: Float = 1

    func multiplierAsString() -> String {
        return multiplier.toGaxbString()
    }

    open func setMultiplier(_ value: String) {
        self.multiplier = (value as NSString).floatValue
    }

	open var constant: Float = 0

    func constantAsString() -> String {
        return constant.toGaxbString()
    }

    open func setConstant(_ value: String) {
        self.constant = (value as NSString).floatValue
    }

	open var ruleSet: PlanetUI.LayoutRuleSet = .none

    func ruleSetAsString() -> String {
        return ruleSet.rawValue
    }

    open func setRuleSet(_ value: String) {
        if let tmp = PlanetUI.LayoutRuleSet(rawValue: value) {
            ruleSet = tmp
        }
    }

	open var ruleSetInfo: String?

    func ruleSetInfoAsString() -> String {
        return ruleSetInfo ?? ""
    }

    open func setRuleSetInfo(_ value: String) {
        self.ruleSetInfo = String(gaxbString: value)
    }

    override open func setAttribute(_ value: String, key:String) {
        super.setAttribute(value, key:key)
        switch key {
            case "priority":
                setPriority(value)
            case "firstItem":
                setFirstItem(value)
            case "secondItem":
                setSecondItem(value)
            case "firstAttribute":
                setFirstAttribute(value)
            case "secondAttribute":
                setSecondAttribute(value)
            case "relation":
                setRelation(value)
            case "multiplier":
                setMultiplier(value)
            case "constant":
                setConstant(value)
            case "ruleSet":
                setRuleSet(value)
            case "ruleSetInfo":
                setRuleSetInfo(value)
            default:
                break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {
       
	if let obj = receiver as? ObjectBase {
            if originalValues["priority"] != nil && obj.originalValues["priority"] == nil {
				obj.setAttribute(originalValues["priority"]!, key: "priority")
            }
            if originalValues["firstItem"] != nil && obj.originalValues["firstItem"] == nil {
				obj.setAttribute(originalValues["firstItem"]!, key: "firstItem")
            }
            if originalValues["secondItem"] != nil && obj.originalValues["secondItem"] == nil {
				obj.setAttribute(originalValues["secondItem"]!, key: "secondItem")
            }
            if originalValues["firstAttribute"] != nil && obj.originalValues["firstAttribute"] == nil {
				obj.setAttribute(originalValues["firstAttribute"]!, key: "firstAttribute")
            }
            if originalValues["secondAttribute"] != nil && obj.originalValues["secondAttribute"] == nil {
				obj.setAttribute(originalValues["secondAttribute"]!, key: "secondAttribute")
            }
            if originalValues["relation"] != nil && obj.originalValues["relation"] == nil {
				obj.setAttribute(originalValues["relation"]!, key: "relation")
            }
            if originalValues["multiplier"] != nil && obj.originalValues["multiplier"] == nil {
				obj.setAttribute(originalValues["multiplier"]!, key: "multiplier")
            }
            if originalValues["constant"] != nil && obj.originalValues["constant"] == nil {
				obj.setAttribute(originalValues["constant"]!, key: "constant")
            }
            if originalValues["ruleSet"] != nil && obj.originalValues["ruleSet"] == nil {
				obj.setAttribute(originalValues["ruleSet"]!, key: "ruleSet")
            }
            if originalValues["ruleSetInfo"] != nil && obj.originalValues["ruleSetInfo"] == nil {
				obj.setAttribute(originalValues["ruleSetInfo"]!, key: "ruleSetInfo")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            xml += " priority='\(priorityAsString())'"
            if firstItem != nil {
                xml += " firstItem='\(firstItemAsString())'"
            }
                if secondItem != nil {
                xml += " secondItem='\(secondItemAsString())'"
            }
                xml += " firstAttribute='\(firstAttributeAsString())'"
            xml += " secondAttribute='\(secondAttributeAsString())'"
            xml += " relation='\(relationAsString())'"
            xml += " multiplier='\(multiplierAsString())'"
            xml += " constant='\(constantAsString())'"
            xml += " ruleSet='\(ruleSetAsString())'"
            if ruleSetInfo != nil {
                xml += " ruleSetInfo='\(ruleSetInfoAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues:Bool) -> String {
        var xml = "<Constraint"
        if (parent == nil || parent?.xmlns != xmlns) {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>" : ">\(sXML)</Constraint>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
