//
// Autogenerated by gaxb at 04:06:25 PM on 06/10/20
//

import UIKit

open class CollectionViewBase : View {


	open func customCopyTo(_ other:CollectionView) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! CollectionView

        copied.layoutClass = layoutClass


		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> ()) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key:String) {
        super.setElement(element, key:key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "CollectionView" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var layoutClass: String = "UICollectionViewFlowLayout"

    func layoutClassAsString() -> String {
        return layoutClass
    }

    open func setLayoutClass(_ value: String) {
        self.layoutClass = String(gaxbString: value)
    }

    override open func setAttribute(_ value: String, key:String) {
        super.setAttribute(value, key:key)
        switch key {
            case "layoutClass":
                setLayoutClass(value)
            default:
                break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {
       
	if let obj = receiver as? ObjectBase {
            if originalValues["layoutClass"] != nil && obj.originalValues["layoutClass"] == nil {
				obj.setAttribute(originalValues["layoutClass"]!, key: "layoutClass")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            xml += " layoutClass='\(layoutClassAsString())'"
        }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues:Bool) -> String {
        var xml = "<CollectionView"
        if (parent == nil || parent?.xmlns != xmlns) {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>" : ">\(sXML)</CollectionView>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
