//
// Autogenerated by gaxb at 05:06:37 PM on 06/10/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class StackViewBase: View {

	open func customCopyTo(_ other: StackView) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! StackView
        copied.alignment = alignment
        copied.axis = axis
        copied.baselineRelativeArrangement = baselineRelativeArrangement
        copied.distribution = distribution
        copied.layoutMarginsRelativeArrangement = layoutMarginsRelativeArrangement
        copied.spacing = spacing

		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> Void) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key: String) {
        super.setElement(element, key: key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "StackView" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var alignment: PlanetUI.StackViewAlignment?

    func alignmentAsString() -> String {
        return alignment!.rawValue
    }

    open func setAlignment(_ value: String) {
        if let tmp = PlanetUI.StackViewAlignment(rawValue: value) {
            alignment = tmp
        }
    }

	open var axis: PlanetUI.LayoutConstraintAxis?

    func axisAsString() -> String {
        return axis!.rawValue
    }

    open func setAxis(_ value: String) {
        if let tmp = PlanetUI.LayoutConstraintAxis(rawValue: value) {
            axis = tmp
        }
    }

	open var baselineRelativeArrangement: Bool?

    func baselineRelativeArrangementAsString() -> String {
        return baselineRelativeArrangement!.toGaxbString()
    }

    open func setBaselineRelativeArrangement(_ value: String) {
        self.baselineRelativeArrangement = value == "true"
    }

	open var distribution: PlanetUI.StackViewDistribution?

    func distributionAsString() -> String {
        return distribution!.rawValue
    }

    open func setDistribution(_ value: String) {
        if let tmp = PlanetUI.StackViewDistribution(rawValue: value) {
            distribution = tmp
        }
    }

	open var layoutMarginsRelativeArrangement: Bool?

    func layoutMarginsRelativeArrangementAsString() -> String {
        return layoutMarginsRelativeArrangement!.toGaxbString()
    }

    open func setLayoutMarginsRelativeArrangement(_ value: String) {
        self.layoutMarginsRelativeArrangement = value == "true"
    }

	open var spacing: Double?

    func spacingAsString() -> String {
        return spacing!.toGaxbString()
    }

    open func setSpacing(_ value: String) {
        self.spacing = (value as NSString).doubleValue
    }

    override open func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        switch key {
        case "alignment":
            setAlignment(value)
        case "axis":
            setAxis(value)
        case "baselineRelativeArrangement":
            setBaselineRelativeArrangement(value)
        case "distribution":
            setDistribution(value)
        case "layoutMarginsRelativeArrangement":
            setLayoutMarginsRelativeArrangement(value)
        case "spacing":
            setSpacing(value)
        default:
            break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["alignment"] != nil && obj.originalValues["alignment"] == nil {
				obj.setAttribute(originalValues["alignment"]!, key: "alignment")
            }
            if originalValues["axis"] != nil && obj.originalValues["axis"] == nil {
				obj.setAttribute(originalValues["axis"]!, key: "axis")
            }
            if originalValues["baselineRelativeArrangement"] != nil && obj.originalValues["baselineRelativeArrangement"] == nil {
				obj.setAttribute(originalValues["baselineRelativeArrangement"]!, key: "baselineRelativeArrangement")
            }
            if originalValues["distribution"] != nil && obj.originalValues["distribution"] == nil {
				obj.setAttribute(originalValues["distribution"]!, key: "distribution")
            }
            if originalValues["layoutMarginsRelativeArrangement"] != nil && obj.originalValues["layoutMarginsRelativeArrangement"] == nil {
				obj.setAttribute(originalValues["layoutMarginsRelativeArrangement"]!, key: "layoutMarginsRelativeArrangement")
            }
            if originalValues["spacing"] != nil && obj.originalValues["spacing"] == nil {
				obj.setAttribute(originalValues["spacing"]!, key: "spacing")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if alignment != nil {
                xml += " alignment='\(alignmentAsString())'"
            }
                if axis != nil {
                xml += " axis='\(axisAsString())'"
            }
                if baselineRelativeArrangement != nil {
                xml += " baselineRelativeArrangement='\(baselineRelativeArrangementAsString())'"
            }
                if distribution != nil {
                xml += " distribution='\(distributionAsString())'"
            }
                if layoutMarginsRelativeArrangement != nil {
                xml += " layoutMarginsRelativeArrangement='\(layoutMarginsRelativeArrangementAsString())'"
            }
                if spacing != nil {
                xml += " spacing='\(spacingAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<StackView"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</StackView>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
