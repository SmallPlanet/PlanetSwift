//
// Autogenerated by gaxb at 04:06:24 PM on 06/10/20
//

import UIKit

open class SegmentedControlBase : Control {


	open func customCopyTo(_ other:SegmentedControl) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! SegmentedControl

        copied.tintColor = tintColor
        copied.textColorNormal = textColorNormal
        copied.textColorHighlighted = textColorHighlighted
        copied.textColorSelected = textColorSelected
        copied.textColorSelectedHighlighted = textColorSelectedHighlighted
        copied.textColorDisabled = textColorDisabled
        copied.fontNormal = fontNormal
        copied.fontHighlighted = fontHighlighted
        copied.fontSelected = fontSelected
        copied.fontSelectedHighlighted = fontSelectedHighlighted
        copied.fontDisabled = fontDisabled
        copied.fontSizeNormal = fontSizeNormal
        copied.fontSizeHighlighted = fontSizeHighlighted
        copied.fontSizeSelectedHighlighted = fontSizeSelectedHighlighted
        copied.fontSizeSelected = fontSizeSelected
        copied.fontSizeDisabled = fontSizeDisabled


		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> ()) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key:String) {
        super.setElement(element, key:key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "SegmentedControl" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var tintColor: UIColor?

    func tintColorAsString() -> String {
        return tintColor!.toGaxbString()
    }

    open func setTintColor(_ value: String) {
        tintColor =  UIColor(gaxbString: value)
    }

	open var textColorNormal: UIColor?

    func textColorNormalAsString() -> String {
        return textColorNormal!.toGaxbString()
    }

    open func setTextColorNormal(_ value: String) {
        textColorNormal =  UIColor(gaxbString: value)
    }

	open var textColorHighlighted: UIColor?

    func textColorHighlightedAsString() -> String {
        return textColorHighlighted!.toGaxbString()
    }

    open func setTextColorHighlighted(_ value: String) {
        textColorHighlighted =  UIColor(gaxbString: value)
    }

	open var textColorSelected: UIColor?

    func textColorSelectedAsString() -> String {
        return textColorSelected!.toGaxbString()
    }

    open func setTextColorSelected(_ value: String) {
        textColorSelected =  UIColor(gaxbString: value)
    }

	open var textColorSelectedHighlighted: UIColor?

    func textColorSelectedHighlightedAsString() -> String {
        return textColorSelectedHighlighted!.toGaxbString()
    }

    open func setTextColorSelectedHighlighted(_ value: String) {
        textColorSelectedHighlighted =  UIColor(gaxbString: value)
    }

	open var textColorDisabled: UIColor?

    func textColorDisabledAsString() -> String {
        return textColorDisabled!.toGaxbString()
    }

    open func setTextColorDisabled(_ value: String) {
        textColorDisabled =  UIColor(gaxbString: value)
    }

	open var fontNormal: String?

    func fontNormalAsString() -> String {
        return fontNormal ?? ""
    }

    open func setFontNormal(_ value: String) {
        self.fontNormal = String(gaxbString: value)
    }

	open var fontHighlighted: String?

    func fontHighlightedAsString() -> String {
        return fontHighlighted ?? ""
    }

    open func setFontHighlighted(_ value: String) {
        self.fontHighlighted = String(gaxbString: value)
    }

	open var fontSelected: String?

    func fontSelectedAsString() -> String {
        return fontSelected ?? ""
    }

    open func setFontSelected(_ value: String) {
        self.fontSelected = String(gaxbString: value)
    }

	open var fontSelectedHighlighted: String?

    func fontSelectedHighlightedAsString() -> String {
        return fontSelectedHighlighted ?? ""
    }

    open func setFontSelectedHighlighted(_ value: String) {
        self.fontSelectedHighlighted = String(gaxbString: value)
    }

	open var fontDisabled: String?

    func fontDisabledAsString() -> String {
        return fontDisabled ?? ""
    }

    open func setFontDisabled(_ value: String) {
        self.fontDisabled = String(gaxbString: value)
    }

	open var fontSizeNormal: Double = 15

    func fontSizeNormalAsString() -> String {
        return fontSizeNormal.toGaxbString()
    }

    open func setFontSizeNormal(_ value: String) {
        self.fontSizeNormal = (value as NSString).doubleValue
    }

	open var fontSizeHighlighted: Double = 15

    func fontSizeHighlightedAsString() -> String {
        return fontSizeHighlighted.toGaxbString()
    }

    open func setFontSizeHighlighted(_ value: String) {
        self.fontSizeHighlighted = (value as NSString).doubleValue
    }

	open var fontSizeSelectedHighlighted: Double = 15

    func fontSizeSelectedHighlightedAsString() -> String {
        return fontSizeSelectedHighlighted.toGaxbString()
    }

    open func setFontSizeSelectedHighlighted(_ value: String) {
        self.fontSizeSelectedHighlighted = (value as NSString).doubleValue
    }

	open var fontSizeSelected: Double = 15

    func fontSizeSelectedAsString() -> String {
        return fontSizeSelected.toGaxbString()
    }

    open func setFontSizeSelected(_ value: String) {
        self.fontSizeSelected = (value as NSString).doubleValue
    }

	open var fontSizeDisabled: Double = 15

    func fontSizeDisabledAsString() -> String {
        return fontSizeDisabled.toGaxbString()
    }

    open func setFontSizeDisabled(_ value: String) {
        self.fontSizeDisabled = (value as NSString).doubleValue
    }

    override open func setAttribute(_ value: String, key:String) {
        super.setAttribute(value, key:key)
        switch key {
            case "tintColor":
                setTintColor(value)
            case "textColorNormal":
                setTextColorNormal(value)
            case "textColorHighlighted":
                setTextColorHighlighted(value)
            case "textColorSelected":
                setTextColorSelected(value)
            case "textColorSelectedHighlighted":
                setTextColorSelectedHighlighted(value)
            case "textColorDisabled":
                setTextColorDisabled(value)
            case "fontNormal":
                setFontNormal(value)
            case "fontHighlighted":
                setFontHighlighted(value)
            case "fontSelected":
                setFontSelected(value)
            case "fontSelectedHighlighted":
                setFontSelectedHighlighted(value)
            case "fontDisabled":
                setFontDisabled(value)
            case "fontSizeNormal":
                setFontSizeNormal(value)
            case "fontSizeHighlighted":
                setFontSizeHighlighted(value)
            case "fontSizeSelectedHighlighted":
                setFontSizeSelectedHighlighted(value)
            case "fontSizeSelected":
                setFontSizeSelected(value)
            case "fontSizeDisabled":
                setFontSizeDisabled(value)
            default:
                break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {
       
	if let obj = receiver as? ObjectBase {
            if originalValues["tintColor"] != nil && obj.originalValues["tintColor"] == nil {
				obj.setAttribute(originalValues["tintColor"]!, key: "tintColor")
            }
            if originalValues["textColorNormal"] != nil && obj.originalValues["textColorNormal"] == nil {
				obj.setAttribute(originalValues["textColorNormal"]!, key: "textColorNormal")
            }
            if originalValues["textColorHighlighted"] != nil && obj.originalValues["textColorHighlighted"] == nil {
				obj.setAttribute(originalValues["textColorHighlighted"]!, key: "textColorHighlighted")
            }
            if originalValues["textColorSelected"] != nil && obj.originalValues["textColorSelected"] == nil {
				obj.setAttribute(originalValues["textColorSelected"]!, key: "textColorSelected")
            }
            if originalValues["textColorSelectedHighlighted"] != nil && obj.originalValues["textColorSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["textColorSelectedHighlighted"]!, key: "textColorSelectedHighlighted")
            }
            if originalValues["textColorDisabled"] != nil && obj.originalValues["textColorDisabled"] == nil {
				obj.setAttribute(originalValues["textColorDisabled"]!, key: "textColorDisabled")
            }
            if originalValues["fontNormal"] != nil && obj.originalValues["fontNormal"] == nil {
				obj.setAttribute(originalValues["fontNormal"]!, key: "fontNormal")
            }
            if originalValues["fontHighlighted"] != nil && obj.originalValues["fontHighlighted"] == nil {
				obj.setAttribute(originalValues["fontHighlighted"]!, key: "fontHighlighted")
            }
            if originalValues["fontSelected"] != nil && obj.originalValues["fontSelected"] == nil {
				obj.setAttribute(originalValues["fontSelected"]!, key: "fontSelected")
            }
            if originalValues["fontSelectedHighlighted"] != nil && obj.originalValues["fontSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["fontSelectedHighlighted"]!, key: "fontSelectedHighlighted")
            }
            if originalValues["fontDisabled"] != nil && obj.originalValues["fontDisabled"] == nil {
				obj.setAttribute(originalValues["fontDisabled"]!, key: "fontDisabled")
            }
            if originalValues["fontSizeNormal"] != nil && obj.originalValues["fontSizeNormal"] == nil {
				obj.setAttribute(originalValues["fontSizeNormal"]!, key: "fontSizeNormal")
            }
            if originalValues["fontSizeHighlighted"] != nil && obj.originalValues["fontSizeHighlighted"] == nil {
				obj.setAttribute(originalValues["fontSizeHighlighted"]!, key: "fontSizeHighlighted")
            }
            if originalValues["fontSizeSelectedHighlighted"] != nil && obj.originalValues["fontSizeSelectedHighlighted"] == nil {
				obj.setAttribute(originalValues["fontSizeSelectedHighlighted"]!, key: "fontSizeSelectedHighlighted")
            }
            if originalValues["fontSizeSelected"] != nil && obj.originalValues["fontSizeSelected"] == nil {
				obj.setAttribute(originalValues["fontSizeSelected"]!, key: "fontSizeSelected")
            }
            if originalValues["fontSizeDisabled"] != nil && obj.originalValues["fontSizeDisabled"] == nil {
				obj.setAttribute(originalValues["fontSizeDisabled"]!, key: "fontSizeDisabled")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if tintColor != nil {
                xml += " tintColor='\(tintColorAsString())'"
            }
                if textColorNormal != nil {
                xml += " textColorNormal='\(textColorNormalAsString())'"
            }
                if textColorHighlighted != nil {
                xml += " textColorHighlighted='\(textColorHighlightedAsString())'"
            }
                if textColorSelected != nil {
                xml += " textColorSelected='\(textColorSelectedAsString())'"
            }
                if textColorSelectedHighlighted != nil {
                xml += " textColorSelectedHighlighted='\(textColorSelectedHighlightedAsString())'"
            }
                if textColorDisabled != nil {
                xml += " textColorDisabled='\(textColorDisabledAsString())'"
            }
                if fontNormal != nil {
                xml += " fontNormal='\(fontNormalAsString())'"
            }
                if fontHighlighted != nil {
                xml += " fontHighlighted='\(fontHighlightedAsString())'"
            }
                if fontSelected != nil {
                xml += " fontSelected='\(fontSelectedAsString())'"
            }
                if fontSelectedHighlighted != nil {
                xml += " fontSelectedHighlighted='\(fontSelectedHighlightedAsString())'"
            }
                if fontDisabled != nil {
                xml += " fontDisabled='\(fontDisabledAsString())'"
            }
                xml += " fontSizeNormal='\(fontSizeNormalAsString())'"
            xml += " fontSizeHighlighted='\(fontSizeHighlightedAsString())'"
            xml += " fontSizeSelectedHighlighted='\(fontSizeSelectedHighlightedAsString())'"
            xml += " fontSizeSelected='\(fontSizeSelectedAsString())'"
            xml += " fontSizeDisabled='\(fontSizeDisabledAsString())'"
        }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues:Bool) -> String {
        var xml = "<SegmentedControl"
        if (parent == nil || parent?.xmlns != xmlns) {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>" : ">\(sXML)</SegmentedControl>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
