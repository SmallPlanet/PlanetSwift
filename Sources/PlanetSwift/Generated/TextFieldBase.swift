//
// Autogenerated by gaxb at 05:06:37 PM on 06/10/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class TextFieldBase: Control {

	open func customCopyTo(_ other: TextField) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! TextField
        copied.text = text
        copied.placeholder = placeholder
        copied.fontName = fontName
        copied.fontSize = fontSize
        copied.textColor = textColor
        copied.textAlignment = textAlignment
        copied.adjustsFontSizeToFitWidth = adjustsFontSizeToFitWidth
        copied.minimumFontSize = minimumFontSize
        copied.secureTextEntry = secureTextEntry
        copied.borderStyle = borderStyle
        copied.clearButtonMode = clearButtonMode
        copied.clearsOnBeginEditing = clearsOnBeginEditing
        copied.returnKeyType = returnKeyType
        copied.keyboardType = keyboardType
        copied.onBeginEditing = onBeginEditing
        copied.onEndEditing = onEndEditing
        copied.onReturnPressed = onReturnPressed
        copied.autocapitalizationType = autocapitalizationType
        copied.autocorrectionType = autocorrectionType
        copied.spellCheckingType = spellCheckingType

		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> Void) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key: String) {
        super.setElement(element, key: key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "TextField" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var text: String?

    func textAsString() -> String {
        return text ?? ""
    }

    open func setText(_ value: String) {
        self.text = String(gaxbString: value)
    }

	open var placeholder: String?

    func placeholderAsString() -> String {
        return placeholder ?? ""
    }

    open func setPlaceholder(_ value: String) {
        self.placeholder = String(gaxbString: value)
    }

	open var fontName: String?

    func fontNameAsString() -> String {
        return fontName ?? ""
    }

    open func setFontName(_ value: String) {
        self.fontName = String(gaxbString: value)
    }

	open var fontSize: Double?

    func fontSizeAsString() -> String {
        return fontSize!.toGaxbString()
    }

    open func setFontSize(_ value: String) {
        self.fontSize = (value as NSString).doubleValue
    }

	open var textColor: UIColor?

    func textColorAsString() -> String {
        return textColor!.toGaxbString()
    }

    open func setTextColor(_ value: String) {
        textColor =  UIColor(gaxbString: value)
    }

	open var textAlignment: PlanetUI.TextAlignment?

    func textAlignmentAsString() -> String {
        return textAlignment!.rawValue
    }

    open func setTextAlignment(_ value: String) {
        if let tmp = PlanetUI.TextAlignment(rawValue: value) {
            textAlignment = tmp
        }
    }

	open var adjustsFontSizeToFitWidth: Bool?

    func adjustsFontSizeToFitWidthAsString() -> String {
        return adjustsFontSizeToFitWidth!.toGaxbString()
    }

    open func setAdjustsFontSizeToFitWidth(_ value: String) {
        self.adjustsFontSizeToFitWidth = value == "true"
    }

	open var minimumFontSize: Double = 0.0

    func minimumFontSizeAsString() -> String {
        return minimumFontSize.toGaxbString()
    }

    open func setMinimumFontSize(_ value: String) {
        self.minimumFontSize = (value as NSString).doubleValue
    }

	open var secureTextEntry: Bool?

    func secureTextEntryAsString() -> String {
        return secureTextEntry!.toGaxbString()
    }

    open func setSecureTextEntry(_ value: String) {
        self.secureTextEntry = value == "true"
    }

	open var borderStyle: PlanetUI.TextBorderStyle?

    func borderStyleAsString() -> String {
        return borderStyle!.rawValue
    }

    open func setBorderStyle(_ value: String) {
        if let tmp = PlanetUI.TextBorderStyle(rawValue: value) {
            borderStyle = tmp
        }
    }

	open var clearButtonMode: PlanetUI.TextFieldViewMode?

    func clearButtonModeAsString() -> String {
        return clearButtonMode!.rawValue
    }

    open func setClearButtonMode(_ value: String) {
        if let tmp = PlanetUI.TextFieldViewMode(rawValue: value) {
            clearButtonMode = tmp
        }
    }

	open var clearsOnBeginEditing: Bool?

    func clearsOnBeginEditingAsString() -> String {
        return clearsOnBeginEditing!.toGaxbString()
    }

    open func setClearsOnBeginEditing(_ value: String) {
        self.clearsOnBeginEditing = value == "true"
    }

	open var returnKeyType: PlanetUI.ReturnKeyType?

    func returnKeyTypeAsString() -> String {
        return returnKeyType!.rawValue
    }

    open func setReturnKeyType(_ value: String) {
        if let tmp = PlanetUI.ReturnKeyType(rawValue: value) {
            returnKeyType = tmp
        }
    }

	open var keyboardType: PlanetUI.KeyboardType?

    func keyboardTypeAsString() -> String {
        return keyboardType!.rawValue
    }

    open func setKeyboardType(_ value: String) {
        if let tmp = PlanetUI.KeyboardType(rawValue: value) {
            keyboardType = tmp
        }
    }

	open var onBeginEditing: String?

    func onBeginEditingAsString() -> String {
        return onBeginEditing ?? ""
    }

    open func setOnBeginEditing(_ value: String) {
        self.onBeginEditing = String(gaxbString: value)
    }

	open var onEndEditing: String?

    func onEndEditingAsString() -> String {
        return onEndEditing ?? ""
    }

    open func setOnEndEditing(_ value: String) {
        self.onEndEditing = String(gaxbString: value)
    }

	open var onReturnPressed: String?

    func onReturnPressedAsString() -> String {
        return onReturnPressed ?? ""
    }

    open func setOnReturnPressed(_ value: String) {
        self.onReturnPressed = String(gaxbString: value)
    }

	open var autocapitalizationType: PlanetUI.TextAutocapitalizationType?

    func autocapitalizationTypeAsString() -> String {
        return autocapitalizationType!.rawValue
    }

    open func setAutocapitalizationType(_ value: String) {
        if let tmp = PlanetUI.TextAutocapitalizationType(rawValue: value) {
            autocapitalizationType = tmp
        }
    }

	open var autocorrectionType: PlanetUI.TextAutocorrectionType?

    func autocorrectionTypeAsString() -> String {
        return autocorrectionType!.rawValue
    }

    open func setAutocorrectionType(_ value: String) {
        if let tmp = PlanetUI.TextAutocorrectionType(rawValue: value) {
            autocorrectionType = tmp
        }
    }

	open var spellCheckingType: PlanetUI.TextSpellCheckingType?

    func spellCheckingTypeAsString() -> String {
        return spellCheckingType!.rawValue
    }

    open func setSpellCheckingType(_ value: String) {
        if let tmp = PlanetUI.TextSpellCheckingType(rawValue: value) {
            spellCheckingType = tmp
        }
    }

    override open func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        switch key {
        case "text":
            setText(value)
        case "placeholder":
            setPlaceholder(value)
        case "fontName":
            setFontName(value)
        case "fontSize":
            setFontSize(value)
        case "textColor":
            setTextColor(value)
        case "textAlignment":
            setTextAlignment(value)
        case "adjustsFontSizeToFitWidth":
            setAdjustsFontSizeToFitWidth(value)
        case "minimumFontSize":
            setMinimumFontSize(value)
        case "secureTextEntry":
            setSecureTextEntry(value)
        case "borderStyle":
            setBorderStyle(value)
        case "clearButtonMode":
            setClearButtonMode(value)
        case "clearsOnBeginEditing":
            setClearsOnBeginEditing(value)
        case "returnKeyType":
            setReturnKeyType(value)
        case "keyboardType":
            setKeyboardType(value)
        case "onBeginEditing":
            setOnBeginEditing(value)
        case "onEndEditing":
            setOnEndEditing(value)
        case "onReturnPressed":
            setOnReturnPressed(value)
        case "autocapitalizationType":
            setAutocapitalizationType(value)
        case "autocorrectionType":
            setAutocorrectionType(value)
        case "spellCheckingType":
            setSpellCheckingType(value)
        default:
            break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["text"] != nil && obj.originalValues["text"] == nil {
				obj.setAttribute(originalValues["text"]!, key: "text")
            }
            if originalValues["placeholder"] != nil && obj.originalValues["placeholder"] == nil {
				obj.setAttribute(originalValues["placeholder"]!, key: "placeholder")
            }
            if originalValues["fontName"] != nil && obj.originalValues["fontName"] == nil {
				obj.setAttribute(originalValues["fontName"]!, key: "fontName")
            }
            if originalValues["fontSize"] != nil && obj.originalValues["fontSize"] == nil {
				obj.setAttribute(originalValues["fontSize"]!, key: "fontSize")
            }
            if originalValues["textColor"] != nil && obj.originalValues["textColor"] == nil {
				obj.setAttribute(originalValues["textColor"]!, key: "textColor")
            }
            if originalValues["textAlignment"] != nil && obj.originalValues["textAlignment"] == nil {
				obj.setAttribute(originalValues["textAlignment"]!, key: "textAlignment")
            }
            if originalValues["adjustsFontSizeToFitWidth"] != nil && obj.originalValues["adjustsFontSizeToFitWidth"] == nil {
				obj.setAttribute(originalValues["adjustsFontSizeToFitWidth"]!, key: "adjustsFontSizeToFitWidth")
            }
            if originalValues["minimumFontSize"] != nil && obj.originalValues["minimumFontSize"] == nil {
				obj.setAttribute(originalValues["minimumFontSize"]!, key: "minimumFontSize")
            }
            if originalValues["secureTextEntry"] != nil && obj.originalValues["secureTextEntry"] == nil {
				obj.setAttribute(originalValues["secureTextEntry"]!, key: "secureTextEntry")
            }
            if originalValues["borderStyle"] != nil && obj.originalValues["borderStyle"] == nil {
				obj.setAttribute(originalValues["borderStyle"]!, key: "borderStyle")
            }
            if originalValues["clearButtonMode"] != nil && obj.originalValues["clearButtonMode"] == nil {
				obj.setAttribute(originalValues["clearButtonMode"]!, key: "clearButtonMode")
            }
            if originalValues["clearsOnBeginEditing"] != nil && obj.originalValues["clearsOnBeginEditing"] == nil {
				obj.setAttribute(originalValues["clearsOnBeginEditing"]!, key: "clearsOnBeginEditing")
            }
            if originalValues["returnKeyType"] != nil && obj.originalValues["returnKeyType"] == nil {
				obj.setAttribute(originalValues["returnKeyType"]!, key: "returnKeyType")
            }
            if originalValues["keyboardType"] != nil && obj.originalValues["keyboardType"] == nil {
				obj.setAttribute(originalValues["keyboardType"]!, key: "keyboardType")
            }
            if originalValues["onBeginEditing"] != nil && obj.originalValues["onBeginEditing"] == nil {
				obj.setAttribute(originalValues["onBeginEditing"]!, key: "onBeginEditing")
            }
            if originalValues["onEndEditing"] != nil && obj.originalValues["onEndEditing"] == nil {
				obj.setAttribute(originalValues["onEndEditing"]!, key: "onEndEditing")
            }
            if originalValues["onReturnPressed"] != nil && obj.originalValues["onReturnPressed"] == nil {
				obj.setAttribute(originalValues["onReturnPressed"]!, key: "onReturnPressed")
            }
            if originalValues["autocapitalizationType"] != nil && obj.originalValues["autocapitalizationType"] == nil {
				obj.setAttribute(originalValues["autocapitalizationType"]!, key: "autocapitalizationType")
            }
            if originalValues["autocorrectionType"] != nil && obj.originalValues["autocorrectionType"] == nil {
				obj.setAttribute(originalValues["autocorrectionType"]!, key: "autocorrectionType")
            }
            if originalValues["spellCheckingType"] != nil && obj.originalValues["spellCheckingType"] == nil {
				obj.setAttribute(originalValues["spellCheckingType"]!, key: "spellCheckingType")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if text != nil {
                xml += " text='\(textAsString())'"
            }
                if placeholder != nil {
                xml += " placeholder='\(placeholderAsString())'"
            }
                if fontName != nil {
                xml += " fontName='\(fontNameAsString())'"
            }
                if fontSize != nil {
                xml += " fontSize='\(fontSizeAsString())'"
            }
                if textColor != nil {
                xml += " textColor='\(textColorAsString())'"
            }
                if textAlignment != nil {
                xml += " textAlignment='\(textAlignmentAsString())'"
            }
                if adjustsFontSizeToFitWidth != nil {
                xml += " adjustsFontSizeToFitWidth='\(adjustsFontSizeToFitWidthAsString())'"
            }
                xml += " minimumFontSize='\(minimumFontSizeAsString())'"
            if secureTextEntry != nil {
                xml += " secureTextEntry='\(secureTextEntryAsString())'"
            }
                if borderStyle != nil {
                xml += " borderStyle='\(borderStyleAsString())'"
            }
                if clearButtonMode != nil {
                xml += " clearButtonMode='\(clearButtonModeAsString())'"
            }
                if clearsOnBeginEditing != nil {
                xml += " clearsOnBeginEditing='\(clearsOnBeginEditingAsString())'"
            }
                if returnKeyType != nil {
                xml += " returnKeyType='\(returnKeyTypeAsString())'"
            }
                if keyboardType != nil {
                xml += " keyboardType='\(keyboardTypeAsString())'"
            }
                if onBeginEditing != nil {
                xml += " onBeginEditing='\(onBeginEditingAsString())'"
            }
                if onEndEditing != nil {
                xml += " onEndEditing='\(onEndEditingAsString())'"
            }
                if onReturnPressed != nil {
                xml += " onReturnPressed='\(onReturnPressedAsString())'"
            }
                if autocapitalizationType != nil {
                xml += " autocapitalizationType='\(autocapitalizationTypeAsString())'"
            }
                if autocorrectionType != nil {
                xml += " autocorrectionType='\(autocorrectionTypeAsString())'"
            }
                if spellCheckingType != nil {
                xml += " spellCheckingType='\(spellCheckingTypeAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<TextField"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</TextField>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
