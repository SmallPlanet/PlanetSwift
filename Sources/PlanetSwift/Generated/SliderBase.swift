//
// Autogenerated by gaxb at 12:12:26 AM on 06/11/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class SliderBase: Control {

	open func customCopyTo(_ other: Slider) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! Slider
        copied.minValue = minValue
        copied.maxValue = maxValue
        copied.minImage = minImage
        copied.maxImage = maxImage
        copied.isContinuous = isContinuous

		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> Void) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key: String) {
        super.setElement(element, key: key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "Slider" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var minValue: Float = 0.0

    func minValueAsString() -> String {
        return minValue.toGaxbString()
    }

    open func setMinValue(_ value: String) {
        self.minValue = (value as NSString).floatValue
    }

	open var maxValue: Float = 1.0

    func maxValueAsString() -> String {
        return maxValue.toGaxbString()
    }

    open func setMaxValue(_ value: String) {
        self.maxValue = (value as NSString).floatValue
    }

	open var minImage: String?

    func minImageAsString() -> String {
        return minImage ?? ""
    }

    open func setMinImage(_ value: String) {
        self.minImage = String(gaxbString: value)
    }

	open var maxImage: String?

    func maxImageAsString() -> String {
        return maxImage ?? ""
    }

    open func setMaxImage(_ value: String) {
        self.maxImage = String(gaxbString: value)
    }

	open var isContinuous: Bool = true

    func isContinuousAsString() -> String {
        return isContinuous.toGaxbString()
    }

    open func setIsContinuous(_ value: String) {
        self.isContinuous = value == "true"
    }

    override open func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        switch key {
        case "minValue":
            setMinValue(value)
        case "maxValue":
            setMaxValue(value)
        case "minImage":
            setMinImage(value)
        case "maxImage":
            setMaxImage(value)
        case "isContinuous":
            setIsContinuous(value)
        default:
            break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["minValue"] != nil && obj.originalValues["minValue"] == nil {
				obj.setAttribute(originalValues["minValue"]!, key: "minValue")
            }
            if originalValues["maxValue"] != nil && obj.originalValues["maxValue"] == nil {
				obj.setAttribute(originalValues["maxValue"]!, key: "maxValue")
            }
            if originalValues["minImage"] != nil && obj.originalValues["minImage"] == nil {
				obj.setAttribute(originalValues["minImage"]!, key: "minImage")
            }
            if originalValues["maxImage"] != nil && obj.originalValues["maxImage"] == nil {
				obj.setAttribute(originalValues["maxImage"]!, key: "maxImage")
            }
            if originalValues["isContinuous"] != nil && obj.originalValues["isContinuous"] == nil {
				obj.setAttribute(originalValues["isContinuous"]!, key: "isContinuous")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            xml += " minValue='\(minValueAsString())'"
            xml += " maxValue='\(maxValueAsString())'"
            if minImage != nil {
                xml += " minImage='\(minImageAsString())'"
            }
                if maxImage != nil {
                xml += " maxImage='\(maxImageAsString())'"
            }
                xml += " isContinuous='\(isContinuousAsString())'"
        }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<Slider"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</Slider>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
