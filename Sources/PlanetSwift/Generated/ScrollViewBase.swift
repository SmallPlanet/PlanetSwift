//
// Autogenerated by gaxb at 05:06:37 PM on 06/10/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class ScrollViewBase: View {

	open func customCopyTo(_ other: ScrollView) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! ScrollView
        copied.contentSize = contentSize
        copied.pagingEnabled = pagingEnabled
        copied.showsHorizontalScrollIndicator = showsHorizontalScrollIndicator
        copied.showsVerticalScrollIndicator = showsVerticalScrollIndicator

		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> Void) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key: String) {
        super.setElement(element, key: key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "ScrollView" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var contentSize: CGSize?

    func contentSizeAsString() -> String {
        return contentSize!.toGaxbString()
    }

    open func setContentSize(_ value: String) {
        contentSize =  CGSize(gaxbString: value)
    }

	open var pagingEnabled: Bool?

    func pagingEnabledAsString() -> String {
        return pagingEnabled!.toGaxbString()
    }

    open func setPagingEnabled(_ value: String) {
        self.pagingEnabled = value == "true"
    }

	open var showsHorizontalScrollIndicator: Bool?

    func showsHorizontalScrollIndicatorAsString() -> String {
        return showsHorizontalScrollIndicator!.toGaxbString()
    }

    open func setShowsHorizontalScrollIndicator(_ value: String) {
        self.showsHorizontalScrollIndicator = value == "true"
    }

	open var showsVerticalScrollIndicator: Bool?

    func showsVerticalScrollIndicatorAsString() -> String {
        return showsVerticalScrollIndicator!.toGaxbString()
    }

    open func setShowsVerticalScrollIndicator(_ value: String) {
        self.showsVerticalScrollIndicator = value == "true"
    }

    override open func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        switch key {
        case "contentSize":
            setContentSize(value)
        case "pagingEnabled":
            setPagingEnabled(value)
        case "showsHorizontalScrollIndicator":
            setShowsHorizontalScrollIndicator(value)
        case "showsVerticalScrollIndicator":
            setShowsVerticalScrollIndicator(value)
        default:
            break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["contentSize"] != nil && obj.originalValues["contentSize"] == nil {
				obj.setAttribute(originalValues["contentSize"]!, key: "contentSize")
            }
            if originalValues["pagingEnabled"] != nil && obj.originalValues["pagingEnabled"] == nil {
				obj.setAttribute(originalValues["pagingEnabled"]!, key: "pagingEnabled")
            }
            if originalValues["showsHorizontalScrollIndicator"] != nil && obj.originalValues["showsHorizontalScrollIndicator"] == nil {
				obj.setAttribute(originalValues["showsHorizontalScrollIndicator"]!, key: "showsHorizontalScrollIndicator")
            }
            if originalValues["showsVerticalScrollIndicator"] != nil && obj.originalValues["showsVerticalScrollIndicator"] == nil {
				obj.setAttribute(originalValues["showsVerticalScrollIndicator"]!, key: "showsVerticalScrollIndicator")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if contentSize != nil {
                xml += " contentSize='\(contentSizeAsString())'"
            }
                if pagingEnabled != nil {
                xml += " pagingEnabled='\(pagingEnabledAsString())'"
            }
                if showsHorizontalScrollIndicator != nil {
                xml += " showsHorizontalScrollIndicator='\(showsHorizontalScrollIndicatorAsString())'"
            }
                if showsVerticalScrollIndicator != nil {
                xml += " showsVerticalScrollIndicator='\(showsVerticalScrollIndicatorAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<ScrollView"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</ScrollView>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
