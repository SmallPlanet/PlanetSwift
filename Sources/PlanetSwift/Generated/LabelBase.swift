//
// Autogenerated by gaxb at 04:06:24 PM on 06/10/20
//

import UIKit

open class LabelBase : View {


	open func customCopyTo(_ other:Label) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! Label

        copied.text = text
        copied.fontName = fontName
        copied.fontSize = fontSize
        copied.textColor = textColor
        copied.textAlignment = textAlignment
        copied.lineBreakMode = lineBreakMode
        copied.adjustsFontSizeToFitWidth = adjustsFontSizeToFitWidth
        copied.minimumScaleFactor = minimumScaleFactor
        copied.numberOfLines = numberOfLines
        copied.lineSpacing = lineSpacing
        copied.minimumLineHeight = minimumLineHeight
        copied.maximumLineHeight = maximumLineHeight


		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> ()) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key:String) {
        super.setElement(element, key:key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "Label" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var text: String?

    func textAsString() -> String {
        return text ?? ""
    }

    open func setText(_ value: String) {
        self.text = String(gaxbString: value)
    }

	open var fontName: String?

    func fontNameAsString() -> String {
        return fontName ?? ""
    }

    open func setFontName(_ value: String) {
        self.fontName = String(gaxbString: value)
    }

	open var fontSize: Double?

    func fontSizeAsString() -> String {
        return fontSize!.toGaxbString()
    }

    open func setFontSize(_ value: String) {
        self.fontSize = (value as NSString).doubleValue
    }

	open var textColor: UIColor?

    func textColorAsString() -> String {
        return textColor!.toGaxbString()
    }

    open func setTextColor(_ value: String) {
        textColor =  UIColor(gaxbString: value)
    }

	open var textAlignment: PlanetUI.TextAlignment?

    func textAlignmentAsString() -> String {
        return textAlignment!.rawValue
    }

    open func setTextAlignment(_ value: String) {
        if let tmp = PlanetUI.TextAlignment(rawValue: value) {
            textAlignment = tmp
        }
    }

	open var lineBreakMode: PlanetUI.LineBreakMode?

    func lineBreakModeAsString() -> String {
        return lineBreakMode!.rawValue
    }

    open func setLineBreakMode(_ value: String) {
        if let tmp = PlanetUI.LineBreakMode(rawValue: value) {
            lineBreakMode = tmp
        }
    }

	open var adjustsFontSizeToFitWidth: Bool?

    func adjustsFontSizeToFitWidthAsString() -> String {
        return adjustsFontSizeToFitWidth!.toGaxbString()
    }

    open func setAdjustsFontSizeToFitWidth(_ value: String) {
        self.adjustsFontSizeToFitWidth = value == "true"
    }

	open var minimumScaleFactor: Double = 0.0

    func minimumScaleFactorAsString() -> String {
        return minimumScaleFactor.toGaxbString()
    }

    open func setMinimumScaleFactor(_ value: String) {
        self.minimumScaleFactor = (value as NSString).doubleValue
    }

	open var numberOfLines: Int?

    func numberOfLinesAsString() -> String {
        return numberOfLines!.toGaxbString()
    }

    open func setNumberOfLines(_ value: String) {
        self.numberOfLines = Int(value)!
    }

	open var lineSpacing: Double?

    func lineSpacingAsString() -> String {
        return lineSpacing!.toGaxbString()
    }

    open func setLineSpacing(_ value: String) {
        self.lineSpacing = (value as NSString).doubleValue
    }

	open var minimumLineHeight: Double?

    func minimumLineHeightAsString() -> String {
        return minimumLineHeight!.toGaxbString()
    }

    open func setMinimumLineHeight(_ value: String) {
        self.minimumLineHeight = (value as NSString).doubleValue
    }

	open var maximumLineHeight: Double?

    func maximumLineHeightAsString() -> String {
        return maximumLineHeight!.toGaxbString()
    }

    open func setMaximumLineHeight(_ value: String) {
        self.maximumLineHeight = (value as NSString).doubleValue
    }

    override open func setAttribute(_ value: String, key:String) {
        super.setAttribute(value, key:key)
        switch key {
            case "text":
                setText(value)
            case "fontName":
                setFontName(value)
            case "fontSize":
                setFontSize(value)
            case "textColor":
                setTextColor(value)
            case "textAlignment":
                setTextAlignment(value)
            case "lineBreakMode":
                setLineBreakMode(value)
            case "adjustsFontSizeToFitWidth":
                setAdjustsFontSizeToFitWidth(value)
            case "minimumScaleFactor":
                setMinimumScaleFactor(value)
            case "numberOfLines":
                setNumberOfLines(value)
            case "lineSpacing":
                setLineSpacing(value)
            case "minimumLineHeight":
                setMinimumLineHeight(value)
            case "maximumLineHeight":
                setMaximumLineHeight(value)
            default:
                break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {
       
	if let obj = receiver as? ObjectBase {
            if originalValues["text"] != nil && obj.originalValues["text"] == nil {
				obj.setAttribute(originalValues["text"]!, key: "text")
            }
            if originalValues["fontName"] != nil && obj.originalValues["fontName"] == nil {
				obj.setAttribute(originalValues["fontName"]!, key: "fontName")
            }
            if originalValues["fontSize"] != nil && obj.originalValues["fontSize"] == nil {
				obj.setAttribute(originalValues["fontSize"]!, key: "fontSize")
            }
            if originalValues["textColor"] != nil && obj.originalValues["textColor"] == nil {
				obj.setAttribute(originalValues["textColor"]!, key: "textColor")
            }
            if originalValues["textAlignment"] != nil && obj.originalValues["textAlignment"] == nil {
				obj.setAttribute(originalValues["textAlignment"]!, key: "textAlignment")
            }
            if originalValues["lineBreakMode"] != nil && obj.originalValues["lineBreakMode"] == nil {
				obj.setAttribute(originalValues["lineBreakMode"]!, key: "lineBreakMode")
            }
            if originalValues["adjustsFontSizeToFitWidth"] != nil && obj.originalValues["adjustsFontSizeToFitWidth"] == nil {
				obj.setAttribute(originalValues["adjustsFontSizeToFitWidth"]!, key: "adjustsFontSizeToFitWidth")
            }
            if originalValues["minimumScaleFactor"] != nil && obj.originalValues["minimumScaleFactor"] == nil {
				obj.setAttribute(originalValues["minimumScaleFactor"]!, key: "minimumScaleFactor")
            }
            if originalValues["numberOfLines"] != nil && obj.originalValues["numberOfLines"] == nil {
				obj.setAttribute(originalValues["numberOfLines"]!, key: "numberOfLines")
            }
            if originalValues["lineSpacing"] != nil && obj.originalValues["lineSpacing"] == nil {
				obj.setAttribute(originalValues["lineSpacing"]!, key: "lineSpacing")
            }
            if originalValues["minimumLineHeight"] != nil && obj.originalValues["minimumLineHeight"] == nil {
				obj.setAttribute(originalValues["minimumLineHeight"]!, key: "minimumLineHeight")
            }
            if originalValues["maximumLineHeight"] != nil && obj.originalValues["maximumLineHeight"] == nil {
				obj.setAttribute(originalValues["maximumLineHeight"]!, key: "maximumLineHeight")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if text != nil {
                xml += " text='\(textAsString())'"
            }
                if fontName != nil {
                xml += " fontName='\(fontNameAsString())'"
            }
                if fontSize != nil {
                xml += " fontSize='\(fontSizeAsString())'"
            }
                if textColor != nil {
                xml += " textColor='\(textColorAsString())'"
            }
                if textAlignment != nil {
                xml += " textAlignment='\(textAlignmentAsString())'"
            }
                if lineBreakMode != nil {
                xml += " lineBreakMode='\(lineBreakModeAsString())'"
            }
                if adjustsFontSizeToFitWidth != nil {
                xml += " adjustsFontSizeToFitWidth='\(adjustsFontSizeToFitWidthAsString())'"
            }
                xml += " minimumScaleFactor='\(minimumScaleFactorAsString())'"
            if numberOfLines != nil {
                xml += " numberOfLines='\(numberOfLinesAsString())'"
            }
                if lineSpacing != nil {
                xml += " lineSpacing='\(lineSpacingAsString())'"
            }
                if minimumLineHeight != nil {
                xml += " minimumLineHeight='\(minimumLineHeightAsString())'"
            }
                if maximumLineHeight != nil {
                xml += " maximumLineHeight='\(maximumLineHeightAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues:Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues:Bool) -> String {
        var xml = "<Label"
        if (parent == nil || parent?.xmlns != xmlns) {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>" : ">\(sXML)</Label>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
