//
// Autogenerated by gaxb at 05:06:37 PM on 06/10/20
//

// swiftlint:disable superfluous_disable_command
// swiftlint:disable cyclomatic_complexity
// swiftlint:disable identifier_name
// swiftlint:disable force_cast
// swiftlint:disable type_body_length
// swiftlint:disable function_body_length
// swiftlint:disable line_length
// swiftlint:disable file_length

import UIKit

open class WebViewBase: View {

	open func customCopyTo(_ other: WebView) {
        // can be overriden by subclasses to provide custom copying
    }

    open override func copy() -> GaxbElement {
        let copied = super.copy() as! WebView
        copied.url = url
        copied.scalesToFit = scalesToFit
        copied.suppressesIncrementalRendering = suppressesIncrementalRendering
        copied.allowsInlineMediaPlayback = allowsInlineMediaPlayback
        copied.mediaPlaybackRequiresUserAction = mediaPlaybackRequiresUserAction

		customCopyTo(copied)

        return copied
    }

	open override func visit(_ visitor: (GaxbElement) -> Void) {
        super.visit(visitor)

	}

    override open func setElement(_ element: GaxbElement, key: String) {
        super.setElement(element, key: key)
    }

    override  open func isKindOfClass(_ className: String) -> Bool {
        if className == "WebView" {
            return true
        }
        return super.isKindOfClass(className)
    }

	open var url: String?

    func urlAsString() -> String {
        return url ?? ""
    }

    open func setUrl(_ value: String) {
        self.url = String(gaxbString: value)
    }

	open var scalesToFit: Bool?

    func scalesToFitAsString() -> String {
        return scalesToFit!.toGaxbString()
    }

    open func setScalesToFit(_ value: String) {
        self.scalesToFit = value == "true"
    }

	open var suppressesIncrementalRendering: Bool?

    func suppressesIncrementalRenderingAsString() -> String {
        return suppressesIncrementalRendering!.toGaxbString()
    }

    open func setSuppressesIncrementalRendering(_ value: String) {
        self.suppressesIncrementalRendering = value == "true"
    }

	open var allowsInlineMediaPlayback: Bool?

    func allowsInlineMediaPlaybackAsString() -> String {
        return allowsInlineMediaPlayback!.toGaxbString()
    }

    open func setAllowsInlineMediaPlayback(_ value: String) {
        self.allowsInlineMediaPlayback = value == "true"
    }

	open var mediaPlaybackRequiresUserAction: Bool?

    func mediaPlaybackRequiresUserActionAsString() -> String {
        return mediaPlaybackRequiresUserAction!.toGaxbString()
    }

    open func setMediaPlaybackRequiresUserAction(_ value: String) {
        self.mediaPlaybackRequiresUserAction = value == "true"
    }

    override open func setAttribute(_ value: String, key: String) {
        super.setAttribute(value, key: key)
        switch key {
        case "url":
            setUrl(value)
        case "scalesToFit":
            setScalesToFit(value)
        case "suppressesIncrementalRendering":
            setSuppressesIncrementalRendering(value)
        case "allowsInlineMediaPlayback":
            setAllowsInlineMediaPlayback(value)
        case "mediaPlaybackRequiresUserAction":
            setMediaPlaybackRequiresUserAction(value)
        default:
            break
        }
    }

    override open func imprintAttributes(_ receiver: GaxbElement?) -> GaxbElement? {

	if let obj = receiver as? ObjectBase {
            if originalValues["url"] != nil && obj.originalValues["url"] == nil {
				obj.setAttribute(originalValues["url"]!, key: "url")
            }
            if originalValues["scalesToFit"] != nil && obj.originalValues["scalesToFit"] == nil {
				obj.setAttribute(originalValues["scalesToFit"]!, key: "scalesToFit")
            }
            if originalValues["suppressesIncrementalRendering"] != nil && obj.originalValues["suppressesIncrementalRendering"] == nil {
				obj.setAttribute(originalValues["suppressesIncrementalRendering"]!, key: "suppressesIncrementalRendering")
            }
            if originalValues["allowsInlineMediaPlayback"] != nil && obj.originalValues["allowsInlineMediaPlayback"] == nil {
				obj.setAttribute(originalValues["allowsInlineMediaPlayback"]!, key: "allowsInlineMediaPlayback")
            }
            if originalValues["mediaPlaybackRequiresUserAction"] != nil && obj.originalValues["mediaPlaybackRequiresUserAction"] == nil {
				obj.setAttribute(originalValues["mediaPlaybackRequiresUserAction"]!, key: "mediaPlaybackRequiresUserAction")
            }
       }
       return super.imprintAttributes(receiver)
    }

    override open func attributesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        if useOriginalValues {
            for (key, value) in originalValues {
                xml += " \(key)='\(value)'"
            }
        } else {
            if url != nil {
                xml += " url='\(urlAsString())'"
            }
                if scalesToFit != nil {
                xml += " scalesToFit='\(scalesToFitAsString())'"
            }
                if suppressesIncrementalRendering != nil {
                xml += " suppressesIncrementalRendering='\(suppressesIncrementalRenderingAsString())'"
            }
                if allowsInlineMediaPlayback != nil {
                xml += " allowsInlineMediaPlayback='\(allowsInlineMediaPlaybackAsString())'"
            }
                if mediaPlaybackRequiresUserAction != nil {
                xml += " mediaPlaybackRequiresUserAction='\(mediaPlaybackRequiresUserActionAsString())'"
            }
            }
        xml += super.attributesXML(useOriginalValues)

        return xml
    }

    override open func sequencesXML(_ useOriginalValues: Bool) -> String {
        var xml = ""
        xml += super.sequencesXML(useOriginalValues)

        return xml
    }

    override open func toXML(_ useOriginalValues: Bool) -> String {
        var xml = "<WebView"
        if parent == nil || parent?.xmlns != xmlns {
            xml += " xmlns='\(xmlns)'"
        }

        xml += attributesXML(useOriginalValues)

        let sXML = sequencesXML(useOriginalValues)
        xml += sXML == "" ? "/>": ">\(sXML)</WebView>"
        return xml
    }

    override open func toXML() -> String {
        return toXML(false)
    }

    override open func description() -> String {
        return toXML()
    }

}
