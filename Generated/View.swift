//
// Autogenerated by gaxb at 10:39:28 AM on 12/12/14
//

import UIKit

public class View: ViewBase, CustomPlaygroundQuickLookable {
    lazy public var view = UIView()

    public override func gaxbPrepare() {
		super.gaxbPrepare()

        if let frame = frame {
            view.bounds = CGRect(origin: .zero, size: frame.size)
            view.center = CGPoint(x: frame.midX, y: frame.midY)
        }
        if let backgroundColor = backgroundColor {
            view.layer.backgroundColor = backgroundColor.cgColor
        }
        if let alpha = alpha {
            view.alpha = CGFloat(alpha)
        }
        if let clipsToBounds = clipsToBounds {
            view.clipsToBounds = clipsToBounds
        }
		if let userInteractionEnabled = userInteractionEnabled {
			view.isUserInteractionEnabled = userInteractionEnabled
		}
        if let hidden = hidden {
            view.isHidden = hidden
        }
        if let tag = tag {
            view.tag = tag
        }
		if let contentMode = contentMode {
            view.contentMode = UIViewContentMode.fromPlanetUIContentMode(contentMode)
        }
		if let contentHuggingPriority = contentHuggingPriority {
            view.setContentHuggingPriority(UILayoutPriority(Float(contentHuggingPriority.x)), for: .horizontal)
            view.setContentHuggingPriority(UILayoutPriority(Float(contentHuggingPriority.y)), for: .vertical)
		}
		if let contentCompressionResistancePriority = contentCompressionResistancePriority {
            view.setContentCompressionResistancePriority(UILayoutPriority(Float(contentCompressionResistancePriority.x)), for: .horizontal)
            view.setContentCompressionResistancePriority(UILayoutPriority(Float(contentCompressionResistancePriority.y)), for: .vertical)
		}
        if let borderColor = borderColor {
            view.layer.borderColor = borderColor.cgColor
        }
        if let borderWidth = borderWidth {
            view.layer.borderWidth = CGFloat(borderWidth)
        }
        if let cornerRadius = cornerRadius {
            view.layer.cornerRadius = CGFloat(cornerRadius)
        }
        if let shadowOffset = shadowOffset {
            view.layer.shadowOffset = shadowOffset
        }
        if let shadowRadius = shadowRadius {
            view.layer.shadowRadius = CGFloat(shadowRadius)
        }
        if let shadowColor = shadowColor {
            view.layer.shadowColor = shadowColor.cgColor
        }
        if let shadowOpacity = shadowOpacity {
            view.layer.shadowOpacity = Float(shadowOpacity)
        }
		if let masksToBounds = masksToBounds {
			view.layer.masksToBounds = masksToBounds
		}
        view.accessibilityIdentifier = id
        view.accessibilityLabel = accessibilityLabel
        view.accessibilityHint = accessibilityHint
        if let trait = accessibilityTraits {
            view.accessibilityTraits = UIAccessibilityTraits.fromPlanetUIAccessibilityTraits(trait: trait)
        }

        if view.superview == nil {
            findParentView()?.addSubview(view)
        }
    }

    internal func addSubview(_ child: UIView) {
        view.addSubview(child)
    }

	internal func findParentView() -> View? {
		var parent:GaxbElement? = self.parent
		while parent != nil {

			if let view = parent as? View {
				return view
			}

			parent = parent!.parent
		}
		return nil
	}

    public var customPlaygroundQuickLook: PlaygroundQuickLook {
        return .view(view)
    }
}
